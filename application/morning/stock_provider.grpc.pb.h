// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stock_provider.proto
#ifndef GRPC_stock_5fprovider_2eproto__INCLUDED
#define GRPC_stock_5fprovider_2eproto__INCLUDED

#include "stock_provider.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace stock_api {

class Stock final {
 public:
  static constexpr char const* service_full_name() {
    return "stock_api.Stock";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>> AsyncGetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>>(AsyncGetDayDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>> PrepareAsyncGetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>>(PrepareAsyncGetDayDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>> AsyncGetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>>(AsyncGetMinuteDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>> PrepareAsyncGetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>>(PrepareAsyncGetMinuteDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::stock_api::CybosTickData>> SubscribeStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::stock_api::CybosTickData>>(SubscribeStockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosTickData>> AsyncSubscribeStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosTickData>>(AsyncSubscribeStockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosTickData>> PrepareAsyncSubscribeStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosTickData>>(PrepareAsyncSubscribeStockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::stock_api::CybosBidAskTickData>> SubscribeBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::stock_api::CybosBidAskTickData>>(SubscribeBidAskRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosBidAskTickData>> AsyncSubscribeBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosBidAskTickData>>(AsyncSubscribeBidAskRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosBidAskTickData>> PrepareAsyncSubscribeBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosBidAskTickData>>(PrepareAsyncSubscribeBidAskRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeStock(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::ClientReadReactor< ::stock_api::CybosTickData>* reactor) = 0;
      #else
      virtual void SubscribeStock(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosTickData>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeBidAsk(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) = 0;
      #else
      virtual void SubscribeBidAsk(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>* AsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>* PrepareAsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>* AsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stock_api::CybosDayDatas>* PrepareAsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::stock_api::CybosTickData>* SubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosTickData>* AsyncSubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosTickData>* PrepareAsyncSubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::stock_api::CybosBidAskTickData>* SubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosBidAskTickData>* AsyncSubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::stock_api::CybosBidAskTickData>* PrepareAsyncSubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>> AsyncGetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>>(AsyncGetDayDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>> PrepareAsyncGetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>>(PrepareAsyncGetDayDataRaw(context, request, cq));
    }
    ::grpc::Status GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>> AsyncGetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>>(AsyncGetMinuteDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>> PrepareAsyncGetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>>(PrepareAsyncGetMinuteDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::stock_api::CybosTickData>> SubscribeStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::stock_api::CybosTickData>>(SubscribeStockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosTickData>> AsyncSubscribeStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosTickData>>(AsyncSubscribeStockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosTickData>> PrepareAsyncSubscribeStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosTickData>>(PrepareAsyncSubscribeStockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::stock_api::CybosBidAskTickData>> SubscribeBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::stock_api::CybosBidAskTickData>>(SubscribeBidAskRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>> AsyncSubscribeBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>>(AsyncSubscribeBidAskRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>> PrepareAsyncSubscribeBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>>(PrepareAsyncSubscribeBidAskRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) override;
      void GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) override;
      void GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeStock(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::ClientReadReactor< ::stock_api::CybosTickData>* reactor) override;
      #else
      void SubscribeStock(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosTickData>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeBidAsk(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) override;
      #else
      void SubscribeBidAsk(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* AsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* PrepareAsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* AsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* PrepareAsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::stock_api::CybosTickData>* SubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) override;
    ::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* AsyncSubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* PrepareAsyncSubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::stock_api::CybosBidAskTickData>* SubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) override;
    ::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* AsyncSubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* PrepareAsyncSubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDayData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMinuteData_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeStock_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeBidAsk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetDayData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response);
    virtual ::grpc::Status GetMinuteData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response);
    virtual ::grpc::Status SubscribeStock(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::grpc::ServerWriter< ::stock_api::CybosTickData>* writer);
    virtual ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDayData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDayData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDayData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDayData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDayData(::grpc::ServerContext* context, ::stock_api::StockQuery* request, ::grpc::ServerAsyncResponseWriter< ::stock_api::CybosDayDatas>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMinuteData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMinuteData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMinuteData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMinuteData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMinuteData(::grpc::ServerContext* context, ::stock_api::StockQuery* request, ::grpc::ServerAsyncResponseWriter< ::stock_api::CybosDayDatas>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeStock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeStock(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeStock(::grpc::ServerContext* context, ::stock_api::StockCodeQuery* request, ::grpc::ServerAsyncWriter< ::stock_api::CybosTickData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeBidAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeBidAsk() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubscribeBidAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeBidAsk(::grpc::ServerContext* context, ::stock_api::StockCodeQuery* request, ::grpc::ServerAsyncWriter< ::stock_api::CybosBidAskTickData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDayData<WithAsyncMethod_GetMinuteData<WithAsyncMethod_SubscribeStock<WithAsyncMethod_SubscribeBidAsk<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDayData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDayData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) { return this->GetDayData(context, request, response); }));}
    void SetMessageAllocatorFor_GetDayData(
        ::grpc::experimental::MessageAllocator< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDayData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDayData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDayData(
      ::grpc::CallbackServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDayData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMinuteData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMinuteData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) { return this->GetMinuteData(context, request, response); }));}
    void SetMessageAllocatorFor_GetMinuteData(
        ::grpc::experimental::MessageAllocator< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMinuteData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMinuteData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMinuteData(
      ::grpc::CallbackServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMinuteData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeStock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::stock_api::StockCodeQuery, ::stock_api::CybosTickData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::stock_api::StockCodeQuery* request) { return this->SubscribeStock(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeStock(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::stock_api::CybosTickData>* SubscribeStock(
      ::grpc::CallbackServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::stock_api::CybosTickData>* SubscribeStock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeBidAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeBidAsk() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::stock_api::StockCodeQuery, ::stock_api::CybosBidAskTickData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::stock_api::StockCodeQuery* request) { return this->SubscribeBidAsk(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeBidAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::stock_api::CybosBidAskTickData>* SubscribeBidAsk(
      ::grpc::CallbackServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::stock_api::CybosBidAskTickData>* SubscribeBidAsk(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetDayData<ExperimentalWithCallbackMethod_GetMinuteData<ExperimentalWithCallbackMethod_SubscribeStock<ExperimentalWithCallbackMethod_SubscribeBidAsk<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetDayData<ExperimentalWithCallbackMethod_GetMinuteData<ExperimentalWithCallbackMethod_SubscribeStock<ExperimentalWithCallbackMethod_SubscribeBidAsk<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDayData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDayData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDayData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDayData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMinuteData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMinuteData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMinuteData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMinuteData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeStock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeStock(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeBidAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeBidAsk() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubscribeBidAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDayData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDayData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDayData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDayData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDayData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMinuteData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMinuteData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMinuteData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMinuteData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMinuteData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeStock() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeStock(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeStock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeBidAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeBidAsk() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubscribeBidAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeBidAsk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDayData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDayData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDayData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDayData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDayData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDayData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDayData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMinuteData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMinuteData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMinuteData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMinuteData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMinuteData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMinuteData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMinuteData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeStock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeStock(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeStock(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeStock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeStock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeBidAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeBidAsk() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeBidAsk(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeBidAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeBidAsk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeBidAsk(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDayData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDayData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(std::bind(&WithStreamedUnaryMethod_GetDayData<BaseClass>::StreamedGetDayData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDayData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDayData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDayData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stock_api::StockQuery,::stock_api::CybosDayDatas>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMinuteData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMinuteData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(std::bind(&WithStreamedUnaryMethod_GetMinuteData<BaseClass>::StreamedGetMinuteData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMinuteData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMinuteData(::grpc::ServerContext* /*context*/, const ::stock_api::StockQuery* /*request*/, ::stock_api::CybosDayDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMinuteData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stock_api::StockQuery,::stock_api::CybosDayDatas>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDayData<WithStreamedUnaryMethod_GetMinuteData<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeStock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::stock_api::StockCodeQuery, ::stock_api::CybosTickData>(std::bind(&WithSplitStreamingMethod_SubscribeStock<BaseClass>::StreamedSubscribeStock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeStock(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeStock(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::stock_api::StockCodeQuery,::stock_api::CybosTickData>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeBidAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeBidAsk() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::stock_api::StockCodeQuery, ::stock_api::CybosBidAskTickData>(std::bind(&WithSplitStreamingMethod_SubscribeBidAsk<BaseClass>::StreamedSubscribeBidAsk, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeBidAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeBidAsk(::grpc::ServerContext* /*context*/, const ::stock_api::StockCodeQuery* /*request*/, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeBidAsk(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::stock_api::StockCodeQuery,::stock_api::CybosBidAskTickData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeStock<WithSplitStreamingMethod_SubscribeBidAsk<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDayData<WithStreamedUnaryMethod_GetMinuteData<WithSplitStreamingMethod_SubscribeStock<WithSplitStreamingMethod_SubscribeBidAsk<Service > > > > StreamedService;
};

}  // namespace stock_api


#endif  // GRPC_stock_5fprovider_2eproto__INCLUDED
