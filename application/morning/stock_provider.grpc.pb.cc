// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stock_provider.proto

#include "stock_provider.pb.h"
#include "stock_provider.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace stock_api {

static const char* Stock_method_names[] = {
  "/stock_api.Stock/GetDayData",
  "/stock_api.Stock/GetMinuteData",
  "/stock_api.Stock/SubscribeStock",
  "/stock_api.Stock/SubscribeBidAsk",
};

std::unique_ptr< Stock::Stub> Stock::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Stock::Stub> stub(new Stock::Stub(channel));
  return stub;
}

Stock::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDayData_(Stock_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMinuteData_(Stock_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeStock_(Stock_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeBidAsk_(Stock_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Stock::Stub::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDayData_, context, request, response);
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetDayData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetDayData_, context, request, false);
}

::grpc::Status Stock::Stub::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMinuteData_, context, request, response);
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request, false);
}

::grpc::ClientReader< ::stock_api::CybosTickData>* Stock::Stub::SubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), rpcmethod_SubscribeStock_, context, request);
}

void Stock::Stub::experimental_async::SubscribeStock(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeStock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::AsyncSubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_SubscribeStock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::PrepareAsyncSubscribeStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_SubscribeStock_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::SubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), rpcmethod_SubscribeBidAsk_, context, request);
}

void Stock::Stub::experimental_async::SubscribeBidAsk(::grpc::ClientContext* context, ::stock_api::StockCodeQuery* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosBidAskTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeBidAsk_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::AsyncSubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_SubscribeBidAsk_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::PrepareAsyncSubscribeBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_SubscribeBidAsk_, context, request, false, nullptr);
}

Stock::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetDayData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetMinuteData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::CybosTickData>(
          std::mem_fn(&Stock::Service::SubscribeStock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::CybosBidAskTickData>(
          std::mem_fn(&Stock::Service::SubscribeBidAsk), this)));
}

Stock::Service::~Service() {
}

::grpc::Status Stock::Service::GetDayData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetMinuteData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SubscribeStock(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::grpc::ServerWriter< ::stock_api::CybosTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SubscribeBidAsk(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace stock_api

