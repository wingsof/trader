// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stock_provider.proto

#include "stock_provider.pb.h"
#include "stock_provider.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace stock_api {

static const char* Stock_method_names[] = {
  "/stock_api.Stock/GetDayData",
  "/stock_api.Stock/GetMinuteData",
  "/stock_api.Stock/GetPastMinuteData",
  "/stock_api.Stock/RequestCybosTickData",
  "/stock_api.Stock/RequestCybosBidAsk",
  "/stock_api.Stock/RequestCybosSubject",
  "/stock_api.Stock/SetCurrentStock",
  "/stock_api.Stock/GetYesterdayTopAmountCodes",
  "/stock_api.Stock/ListenCurrentStock",
  "/stock_api.Stock/ListenCybosTickData",
  "/stock_api.Stock/ListenCybosBidAsk",
  "/stock_api.Stock/ListenCurrentTime",
  "/stock_api.Stock/ListenCybosSubject",
  "/stock_api.Stock/StartSimulation",
  "/stock_api.Stock/StopSimulation",
};

std::unique_ptr< Stock::Stub> Stock::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Stock::Stub> stub(new Stock::Stub(channel));
  return stub;
}

Stock::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDayData_(Stock_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMinuteData_(Stock_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPastMinuteData_(Stock_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosTickData_(Stock_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosBidAsk_(Stock_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosSubject_(Stock_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentStock_(Stock_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetYesterdayTopAmountCodes_(Stock_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListenCurrentStock_(Stock_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosTickData_(Stock_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosBidAsk_(Stock_method_names[10], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCurrentTime_(Stock_method_names[11], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosSubject_(Stock_method_names[12], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StartSimulation_(Stock_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopSimulation_(Stock_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Stock::Stub::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDayData_, context, request, response);
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetDayData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetDayData_, context, request, false);
}

::grpc::Status Stock::Stub::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMinuteData_, context, request, response);
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request, false);
}

::grpc::Status Stock::Stub::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPastMinuteData_, context, request, response);
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetPastMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetPastMinuteData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetPastMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetPastMinuteData_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosTickData_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosTickDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosTickData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosTickDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosTickData_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosBidAsk_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosBidAsk_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosBidAsk_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosSubject_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosSubjectRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosSubject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosSubjectRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosSubject_, context, request, false);
}

::grpc::Status Stock::Stub::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockSelection& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentStock_, context, request, response);
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockSelection* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockSelection* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetCurrentStockRaw(::grpc::ClientContext* context, const ::stock_api::StockSelection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCurrentStock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetCurrentStockRaw(::grpc::ClientContext* context, const ::stock_api::StockSelection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCurrentStock_, context, request, false);
}

::grpc::Status Stock::Stub::GetYesterdayTopAmountCodes(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetYesterdayTopAmountCodes_, context, request, response);
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountCodes(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountCodes_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountCodes_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountCodes(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountCodes_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetYesterdayTopAmountCodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetYesterdayTopAmountCodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetYesterdayTopAmountCodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetYesterdayTopAmountCodes_, context, request, false);
}

::grpc::ClientReader< ::stock_api::StockSelection>* Stock::Stub::ListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::StockSelection>::Create(channel_.get(), rpcmethod_ListenCurrentStock_, context, request);
}

void Stock::Stub::experimental_async::ListenCurrentStock(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::StockSelection>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::StockSelection>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCurrentStock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::StockSelection>* Stock::Stub::AsyncListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::StockSelection>::Create(channel_.get(), cq, rpcmethod_ListenCurrentStock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::StockSelection>* Stock::Stub::PrepareAsyncListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::StockSelection>::Create(channel_.get(), cq, rpcmethod_ListenCurrentStock_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosTickData>* Stock::Stub::ListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), rpcmethod_ListenCybosTickData_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosTickData(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosTickData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::AsyncListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosTickData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::PrepareAsyncListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosTickData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::ListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), rpcmethod_ListenCybosBidAsk_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosBidAsk(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosBidAskTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosBidAsk_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::AsyncListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosBidAsk_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::PrepareAsyncListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosBidAsk_, context, request, false, nullptr);
}

::grpc::ClientReader< ::google::protobuf::Timestamp>* Stock::Stub::ListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), rpcmethod_ListenCurrentTime_, context, request);
}

void Stock::Stub::experimental_async::ListenCurrentTime(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Timestamp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::google::protobuf::Timestamp>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCurrentTime_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Timestamp>* Stock::Stub::AsyncListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), cq, rpcmethod_ListenCurrentTime_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Timestamp>* Stock::Stub::PrepareAsyncListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), cq, rpcmethod_ListenCurrentTime_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::ListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), rpcmethod_ListenCybosSubject_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosSubject(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosSubjectTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosSubjectTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosSubject_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::AsyncListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosSubject_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::PrepareAsyncListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosSubject_, context, request, false, nullptr);
}

::grpc::Status Stock::Stub::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationArgument& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartSimulation_, context, request, response);
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationArgument* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationArgument* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncStartSimulationRaw(::grpc::ClientContext* context, const ::stock_api::SimulationArgument& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StartSimulation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncStartSimulationRaw(::grpc::ClientContext* context, const ::stock_api::SimulationArgument& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StartSimulation_, context, request, false);
}

::grpc::Status Stock::Stub::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopSimulation_, context, request, response);
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncStopSimulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopSimulation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncStopSimulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopSimulation_, context, request, false);
}

Stock::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetDayData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetMinuteData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::PastMinuteQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetPastMinuteData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosTickData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosBidAsk), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosSubject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockSelection, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetCurrentStock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Timestamp, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetYesterdayTopAmountCodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::StockSelection>(
          std::mem_fn(&Stock::Service::ListenCurrentStock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosTickData>(
          std::mem_fn(&Stock::Service::ListenCybosTickData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosBidAskTickData>(
          std::mem_fn(&Stock::Service::ListenCybosBidAsk), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Timestamp>(
          std::mem_fn(&Stock::Service::ListenCurrentTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosSubjectTickData>(
          std::mem_fn(&Stock::Service::ListenCybosSubject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::SimulationArgument, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::StartSimulation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::StopSimulation), this)));
}

Stock::Service::~Service() {
}

::grpc::Status Stock::Service::GetDayData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetMinuteData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetPastMinuteData(::grpc::ServerContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosTickData(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosBidAsk(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosSubject(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetCurrentStock(::grpc::ServerContext* context, const ::stock_api::StockSelection* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetYesterdayTopAmountCodes(::grpc::ServerContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCurrentStock(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::StockSelection>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosTickData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosBidAsk(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCurrentTime(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::google::protobuf::Timestamp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosSubject(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosSubjectTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::StartSimulation(::grpc::ServerContext* context, const ::stock_api::SimulationArgument* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::StopSimulation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace stock_api

