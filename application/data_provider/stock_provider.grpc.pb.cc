// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stock_provider.proto

#include "stock_provider.pb.h"
#include "stock_provider.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace stock_api {

static const char* Stock_method_names[] = {
  "/stock_api.Stock/SayHello",
  "/stock_api.Stock/GetDayData",
  "/stock_api.Stock/GetMinuteData",
  "/stock_api.Stock/GetTodayMinuteData",
  "/stock_api.Stock/GetPastMinuteData",
  "/stock_api.Stock/GetSubscribeCodes",
  "/stock_api.Stock/GetBalance",
  "/stock_api.Stock/OrderStock",
  "/stock_api.Stock/ChangeOrder",
  "/stock_api.Stock/CancelOrder",
  "/stock_api.Stock/RequestCybosTickData",
  "/stock_api.Stock/RequestCybosBidAsk",
  "/stock_api.Stock/RequestCybosSubject",
  "/stock_api.Stock/RequestCybosAlarm",
  "/stock_api.Stock/RequestToTrader",
  "/stock_api.Stock/RequestCybosTradeResult",
  "/stock_api.Stock/ReportOrderResult",
  "/stock_api.Stock/IsKospi",
  "/stock_api.Stock/GetViPrice",
  "/stock_api.Stock/ListenTraderMsg",
  "/stock_api.Stock/ListenCybosOrderResult",
  "/stock_api.Stock/ListenOrderResult",
  "/stock_api.Stock/SetCurrentStock",
  "/stock_api.Stock/SetCurrentDateTime",
  "/stock_api.Stock/GetCompanyName",
  "/stock_api.Stock/GetFavoriteList",
  "/stock_api.Stock/AddFavorite",
  "/stock_api.Stock/RemoveFavorite",
  "/stock_api.Stock/ClearRecentList",
  "/stock_api.Stock/GetYesterdayTopAmountList",
  "/stock_api.Stock/SetTodayAmountRatioList",
  "/stock_api.Stock/SetTodayAmountMomentumList",
  "/stock_api.Stock/SetTodayAmountTopList",
  "/stock_api.Stock/GetTodayTopAmountList",
  "/stock_api.Stock/GetTodayNineThirtyList",
  "/stock_api.Stock/GetRecentSearch",
  "/stock_api.Stock/GetViList",
  "/stock_api.Stock/ListenCurrentStock",
  "/stock_api.Stock/ListenListChanged",
  "/stock_api.Stock/ListenCybosTickData",
  "/stock_api.Stock/ListenCybosBidAsk",
  "/stock_api.Stock/ListenCurrentTime",
  "/stock_api.Stock/ListenCybosSubject",
  "/stock_api.Stock/ListenCybosAlarm",
  "/stock_api.Stock/ListenSimulationStatusChanged",
  "/stock_api.Stock/SetSimulationStockTick",
  "/stock_api.Stock/SetSimulationBidAskTick",
  "/stock_api.Stock/SetSimulationSubjectTick",
  "/stock_api.Stock/SetSimulationAlarmTick",
  "/stock_api.Stock/ListenSimulationOperation",
  "/stock_api.Stock/StartSimulation",
  "/stock_api.Stock/StopSimulation",
  "/stock_api.Stock/SetSimulationStatus",
  "/stock_api.Stock/GetSimulationStatus",
};

std::unique_ptr< Stock::Stub> Stock::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Stock::Stub> stub(new Stock::Stub(channel));
  return stub;
}

Stock::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Stock_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDayData_(Stock_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMinuteData_(Stock_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodayMinuteData_(Stock_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPastMinuteData_(Stock_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscribeCodes_(Stock_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBalance_(Stock_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderStock_(Stock_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeOrder_(Stock_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(Stock_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosTickData_(Stock_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosBidAsk_(Stock_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosSubject_(Stock_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosAlarm_(Stock_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestToTrader_(Stock_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosTradeResult_(Stock_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportOrderResult_(Stock_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsKospi_(Stock_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetViPrice_(Stock_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListenTraderMsg_(Stock_method_names[19], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosOrderResult_(Stock_method_names[20], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenOrderResult_(Stock_method_names[21], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetCurrentStock_(Stock_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentDateTime_(Stock_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCompanyName_(Stock_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFavoriteList_(Stock_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddFavorite_(Stock_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFavorite_(Stock_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearRecentList_(Stock_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetYesterdayTopAmountList_(Stock_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTodayAmountRatioList_(Stock_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTodayAmountMomentumList_(Stock_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTodayAmountTopList_(Stock_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodayTopAmountList_(Stock_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodayNineThirtyList_(Stock_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecentSearch_(Stock_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetViList_(Stock_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListenCurrentStock_(Stock_method_names[37], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenListChanged_(Stock_method_names[38], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosTickData_(Stock_method_names[39], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosBidAsk_(Stock_method_names[40], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCurrentTime_(Stock_method_names[41], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosSubject_(Stock_method_names[42], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosAlarm_(Stock_method_names[43], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenSimulationStatusChanged_(Stock_method_names[44], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetSimulationStockTick_(Stock_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationBidAskTick_(Stock_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationSubjectTick_(Stock_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationAlarmTick_(Stock_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListenSimulationOperation_(Stock_method_names[49], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StartSimulation_(Stock_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopSimulation_(Stock_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationStatus_(Stock_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSimulationStatus_(Stock_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Stock::Stub::SayHello(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Stock::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::Status Stock::Stub::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDayData_, context, request, response);
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetDayData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetDayData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetDayData_, context, request, false);
}

::grpc::Status Stock::Stub::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMinuteData_, context, request, response);
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request, false);
}

::grpc::Status Stock::Stub::GetTodayMinuteData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTodayMinuteData_, context, request, response);
}

void Stock::Stub::experimental_async::GetTodayMinuteData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodayMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetTodayMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodayMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetTodayMinuteData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodayMinuteData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetTodayMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodayMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetTodayMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetTodayMinuteData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetTodayMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetTodayMinuteData_, context, request, false);
}

::grpc::Status Stock::Stub::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPastMinuteData_, context, request, response);
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetPastMinuteData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosDayDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetPastMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetPastMinuteData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetPastMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosDayDatas>::Create(channel_.get(), cq, rpcmethod_GetPastMinuteData_, context, request, false);
}

::grpc::Status Stock::Stub::GetSubscribeCodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSubscribeCodes_, context, request, response);
}

void Stock::Stub::experimental_async::GetSubscribeCodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSubscribeCodes_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetSubscribeCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSubscribeCodes_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetSubscribeCodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSubscribeCodes_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetSubscribeCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSubscribeCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetSubscribeCodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetSubscribeCodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetSubscribeCodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetSubscribeCodes_, context, request, false);
}

::grpc::Status Stock::Stub::GetBalance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::Balance* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBalance_, context, request, response);
}

void Stock::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::Balance* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Balance* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::Balance* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Balance* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Balance>* Stock::Stub::AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Balance>::Create(channel_.get(), cq, rpcmethod_GetBalance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Balance>* Stock::Stub::PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Balance>::Create(channel_.get(), cq, rpcmethod_GetBalance_, context, request, false);
}

::grpc::Status Stock::Stub::OrderStock(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::stock_api::CybosOrderReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OrderStock_, context, request, response);
}

void Stock::Stub::experimental_async::OrderStock(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OrderStock_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::OrderStock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OrderStock_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::OrderStock(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OrderStock_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::OrderStock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosOrderReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OrderStock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::AsyncOrderStockRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosOrderReturn>::Create(channel_.get(), cq, rpcmethod_OrderStock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::PrepareAsyncOrderStockRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosOrderReturn>::Create(channel_.get(), cq, rpcmethod_OrderStock_, context, request, false);
}

::grpc::Status Stock::Stub::ChangeOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::stock_api::CybosOrderReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeOrder_, context, request, response);
}

void Stock::Stub::experimental_async::ChangeOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeOrder_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::ChangeOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeOrder_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::ChangeOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeOrder_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::ChangeOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosOrderReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::AsyncChangeOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosOrderReturn>::Create(channel_.get(), cq, rpcmethod_ChangeOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::PrepareAsyncChangeOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosOrderReturn>::Create(channel_.get(), cq, rpcmethod_ChangeOrder_, context, request, false);
}

::grpc::Status Stock::Stub::CancelOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::stock_api::CybosOrderReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void Stock::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CybosOrderReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosOrderReturn>::Create(channel_.get(), cq, rpcmethod_CancelOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CybosOrderReturn>::Create(channel_.get(), cq, rpcmethod_CancelOrder_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosTickData_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosTickData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosTickDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosTickData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosTickDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosTickData_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosBidAsk_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosBidAsk_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosBidAsk_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosSubject_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosSubject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosSubjectRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosSubject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosSubjectRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosSubject_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosAlarm_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosAlarm_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosAlarm(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosAlarm_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosAlarm_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosAlarm(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosAlarm_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosAlarm_, context, request, false);
}

::grpc::Status Stock::Stub::RequestToTrader(::grpc::ClientContext* context, const ::stock_api::TradeMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestToTrader_, context, request, response);
}

void Stock::Stub::experimental_async::RequestToTrader(::grpc::ClientContext* context, const ::stock_api::TradeMsg* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestToTrader_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestToTrader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestToTrader_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestToTrader(::grpc::ClientContext* context, const ::stock_api::TradeMsg* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestToTrader_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestToTrader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestToTrader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestToTraderRaw(::grpc::ClientContext* context, const ::stock_api::TradeMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestToTrader_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestToTraderRaw(::grpc::ClientContext* context, const ::stock_api::TradeMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestToTrader_, context, request, false);
}

::grpc::Status Stock::Stub::RequestCybosTradeResult(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestCybosTradeResult_, context, request, response);
}

void Stock::Stub::experimental_async::RequestCybosTradeResult(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTradeResult_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosTradeResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTradeResult_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RequestCybosTradeResult(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTradeResult_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RequestCybosTradeResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTradeResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosTradeResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosTradeResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosTradeResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RequestCybosTradeResult_, context, request, false);
}

::grpc::Status Stock::Stub::ReportOrderResult(::grpc::ClientContext* context, const ::stock_api::OrderResult& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportOrderResult_, context, request, response);
}

void Stock::Stub::experimental_async::ReportOrderResult(::grpc::ClientContext* context, const ::stock_api::OrderResult* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportOrderResult_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::ReportOrderResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportOrderResult_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::ReportOrderResult(::grpc::ClientContext* context, const ::stock_api::OrderResult* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportOrderResult_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::ReportOrderResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportOrderResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncReportOrderResultRaw(::grpc::ClientContext* context, const ::stock_api::OrderResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ReportOrderResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncReportOrderResultRaw(::grpc::ClientContext* context, const ::stock_api::OrderResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ReportOrderResult_, context, request, false);
}

::grpc::Status Stock::Stub::IsKospi(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsKospi_, context, request, response);
}

void Stock::Stub::experimental_async::IsKospi(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsKospi_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::IsKospi(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsKospi_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::IsKospi(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsKospi_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::IsKospi(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsKospi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::AsyncIsKospiRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Bool>::Create(channel_.get(), cq, rpcmethod_IsKospi_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::PrepareAsyncIsKospiRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Bool>::Create(channel_.get(), cq, rpcmethod_IsKospi_, context, request, false);
}

::grpc::Status Stock::Stub::GetViPrice(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::Prices* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetViPrice_, context, request, response);
}

void Stock::Stub::experimental_async::GetViPrice(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Prices* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViPrice_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetViPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Prices* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViPrice_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetViPrice(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Prices* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViPrice_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetViPrice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Prices* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Prices>* Stock::Stub::AsyncGetViPriceRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Prices>::Create(channel_.get(), cq, rpcmethod_GetViPrice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Prices>* Stock::Stub::PrepareAsyncGetViPriceRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Prices>::Create(channel_.get(), cq, rpcmethod_GetViPrice_, context, request, false);
}

::grpc::ClientReader< ::stock_api::TradeMsg>* Stock::Stub::ListenTraderMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::TradeMsg>::Create(channel_.get(), rpcmethod_ListenTraderMsg_, context, request);
}

void Stock::Stub::experimental_async::ListenTraderMsg(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::TradeMsg>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::TradeMsg>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenTraderMsg_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::TradeMsg>* Stock::Stub::AsyncListenTraderMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::TradeMsg>::Create(channel_.get(), cq, rpcmethod_ListenTraderMsg_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::TradeMsg>* Stock::Stub::PrepareAsyncListenTraderMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::TradeMsg>::Create(channel_.get(), cq, rpcmethod_ListenTraderMsg_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosOrderResult>* Stock::Stub::ListenCybosOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosOrderResult>::Create(channel_.get(), rpcmethod_ListenCybosOrderResult_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosOrderResult(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosOrderResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosOrderResult>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosOrderResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosOrderResult>* Stock::Stub::AsyncListenCybosOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosOrderResult>::Create(channel_.get(), cq, rpcmethod_ListenCybosOrderResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosOrderResult>* Stock::Stub::PrepareAsyncListenCybosOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosOrderResult>::Create(channel_.get(), cq, rpcmethod_ListenCybosOrderResult_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::OrderResult>* Stock::Stub::ListenOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::OrderResult>::Create(channel_.get(), rpcmethod_ListenOrderResult_, context, request);
}

void Stock::Stub::experimental_async::ListenOrderResult(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::OrderResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::OrderResult>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenOrderResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::OrderResult>* Stock::Stub::AsyncListenOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::OrderResult>::Create(channel_.get(), cq, rpcmethod_ListenOrderResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::OrderResult>* Stock::Stub::PrepareAsyncListenOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::OrderResult>::Create(channel_.get(), cq, rpcmethod_ListenOrderResult_, context, request, false, nullptr);
}

::grpc::Status Stock::Stub::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentStock_, context, request, response);
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetCurrentStock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetCurrentStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCurrentStock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetCurrentStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCurrentStock_, context, request, false);
}

::grpc::Status Stock::Stub::SetCurrentDateTime(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentDateTime_, context, request, response);
}

void Stock::Stub::experimental_async::SetCurrentDateTime(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentDateTime_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetCurrentDateTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentDateTime_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetCurrentDateTime(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentDateTime_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetCurrentDateTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentDateTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetCurrentDateTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCurrentDateTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetCurrentDateTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCurrentDateTime_, context, request, false);
}

::grpc::Status Stock::Stub::GetCompanyName(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::CompanyName* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCompanyName_, context, request, response);
}

void Stock::Stub::experimental_async::GetCompanyName(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CompanyName* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCompanyName_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetCompanyName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CompanyName* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCompanyName_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetCompanyName(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CompanyName* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCompanyName_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetCompanyName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CompanyName* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCompanyName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CompanyName>* Stock::Stub::AsyncGetCompanyNameRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CompanyName>::Create(channel_.get(), cq, rpcmethod_GetCompanyName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CompanyName>* Stock::Stub::PrepareAsyncGetCompanyNameRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CompanyName>::Create(channel_.get(), cq, rpcmethod_GetCompanyName_, context, request, false);
}

::grpc::Status Stock::Stub::GetFavoriteList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFavoriteList_, context, request, response);
}

void Stock::Stub::experimental_async::GetFavoriteList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetFavoriteList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetFavoriteList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetFavoriteList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetFavoriteListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetFavoriteList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetFavoriteListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetFavoriteList_, context, request, false);
}

::grpc::Status Stock::Stub::AddFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddFavorite_, context, request, response);
}

void Stock::Stub::experimental_async::AddFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddFavorite_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::AddFavorite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddFavorite_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::AddFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddFavorite_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::AddFavorite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddFavorite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncAddFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddFavorite_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncAddFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddFavorite_, context, request, false);
}

::grpc::Status Stock::Stub::RemoveFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveFavorite_, context, request, response);
}

void Stock::Stub::experimental_async::RemoveFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveFavorite_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RemoveFavorite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveFavorite_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::RemoveFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveFavorite_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::RemoveFavorite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveFavorite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRemoveFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RemoveFavorite_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRemoveFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RemoveFavorite_, context, request, false);
}

::grpc::Status Stock::Stub::ClearRecentList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearRecentList_, context, request, response);
}

void Stock::Stub::experimental_async::ClearRecentList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearRecentList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::ClearRecentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearRecentList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::ClearRecentList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearRecentList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::ClearRecentList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearRecentList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncClearRecentListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ClearRecentList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncClearRecentListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ClearRecentList_, context, request, false);
}

::grpc::Status Stock::Stub::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::stock_api::TopList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetYesterdayTopAmountList_, context, request, response);
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::TopList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::TopList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::TopList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::TopList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::TopList>* Stock::Stub::AsyncGetYesterdayTopAmountListRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::TopList>::Create(channel_.get(), cq, rpcmethod_GetYesterdayTopAmountList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::TopList>* Stock::Stub::PrepareAsyncGetYesterdayTopAmountListRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::TopList>::Create(channel_.get(), cq, rpcmethod_GetYesterdayTopAmountList_, context, request, false);
}

::grpc::Status Stock::Stub::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTodayAmountRatioList_, context, request, response);
}

void Stock::Stub::experimental_async::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountRatioList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountRatioList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountRatioList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountRatioList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetTodayAmountRatioListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTodayAmountRatioList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetTodayAmountRatioListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTodayAmountRatioList_, context, request, false);
}

::grpc::Status Stock::Stub::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTodayAmountMomentumList_, context, request, response);
}

void Stock::Stub::experimental_async::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountMomentumList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountMomentumList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountMomentumList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountMomentumList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetTodayAmountMomentumListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTodayAmountMomentumList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetTodayAmountMomentumListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTodayAmountMomentumList_, context, request, false);
}

::grpc::Status Stock::Stub::SetTodayAmountTopList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTodayAmountTopList_, context, request, response);
}

void Stock::Stub::experimental_async::SetTodayAmountTopList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountTopList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetTodayAmountTopList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountTopList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetTodayAmountTopList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountTopList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetTodayAmountTopList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountTopList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetTodayAmountTopListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTodayAmountTopList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetTodayAmountTopListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTodayAmountTopList_, context, request, false);
}

::grpc::Status Stock::Stub::GetTodayTopAmountList(::grpc::ClientContext* context, const ::stock_api::TodayTopOption& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTodayTopAmountList_, context, request, response);
}

void Stock::Stub::experimental_async::GetTodayTopAmountList(::grpc::ClientContext* context, const ::stock_api::TodayTopOption* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodayTopAmountList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetTodayTopAmountList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodayTopAmountList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetTodayTopAmountList(::grpc::ClientContext* context, const ::stock_api::TodayTopOption* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodayTopAmountList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetTodayTopAmountList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodayTopAmountList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetTodayTopAmountListRaw(::grpc::ClientContext* context, const ::stock_api::TodayTopOption& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetTodayTopAmountList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetTodayTopAmountListRaw(::grpc::ClientContext* context, const ::stock_api::TodayTopOption& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetTodayTopAmountList_, context, request, false);
}

::grpc::Status Stock::Stub::GetTodayNineThirtyList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTodayNineThirtyList_, context, request, response);
}

void Stock::Stub::experimental_async::GetTodayNineThirtyList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodayNineThirtyList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetTodayNineThirtyList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodayNineThirtyList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetTodayNineThirtyList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodayNineThirtyList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetTodayNineThirtyList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodayNineThirtyList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetTodayNineThirtyListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetTodayNineThirtyList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetTodayNineThirtyListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetTodayNineThirtyList_, context, request, false);
}

::grpc::Status Stock::Stub::GetRecentSearch(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRecentSearch_, context, request, response);
}

void Stock::Stub::experimental_async::GetRecentSearch(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecentSearch_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetRecentSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecentSearch_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetRecentSearch(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecentSearch_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetRecentSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecentSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetRecentSearchRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetRecentSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetRecentSearchRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetRecentSearch_, context, request, false);
}

::grpc::Status Stock::Stub::GetViList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetViList_, context, request, response);
}

void Stock::Stub::experimental_async::GetViList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetViList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViList_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetViList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViList_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetViList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::CodeList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetViListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetViList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetViListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::CodeList>::Create(channel_.get(), cq, rpcmethod_GetViList_, context, request, false);
}

::grpc::ClientReader< ::stock_api::StockCodeQuery>* Stock::Stub::ListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::StockCodeQuery>::Create(channel_.get(), rpcmethod_ListenCurrentStock_, context, request);
}

void Stock::Stub::experimental_async::ListenCurrentStock(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::StockCodeQuery>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::StockCodeQuery>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCurrentStock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::StockCodeQuery>* Stock::Stub::AsyncListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::StockCodeQuery>::Create(channel_.get(), cq, rpcmethod_ListenCurrentStock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::StockCodeQuery>* Stock::Stub::PrepareAsyncListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::StockCodeQuery>::Create(channel_.get(), cq, rpcmethod_ListenCurrentStock_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::ListType>* Stock::Stub::ListenListChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::ListType>::Create(channel_.get(), rpcmethod_ListenListChanged_, context, request);
}

void Stock::Stub::experimental_async::ListenListChanged(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::ListType>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::ListType>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenListChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::ListType>* Stock::Stub::AsyncListenListChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::ListType>::Create(channel_.get(), cq, rpcmethod_ListenListChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::ListType>* Stock::Stub::PrepareAsyncListenListChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::ListType>::Create(channel_.get(), cq, rpcmethod_ListenListChanged_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosTickData>* Stock::Stub::ListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), rpcmethod_ListenCybosTickData_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosTickData(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosTickData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::AsyncListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosTickData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::PrepareAsyncListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosTickData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::ListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), rpcmethod_ListenCybosBidAsk_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosBidAsk(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosBidAskTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosBidAsk_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::AsyncListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosBidAsk_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::PrepareAsyncListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosBidAsk_, context, request, false, nullptr);
}

::grpc::ClientReader< ::google::protobuf::Timestamp>* Stock::Stub::ListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), rpcmethod_ListenCurrentTime_, context, request);
}

void Stock::Stub::experimental_async::ListenCurrentTime(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Timestamp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::google::protobuf::Timestamp>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCurrentTime_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Timestamp>* Stock::Stub::AsyncListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), cq, rpcmethod_ListenCurrentTime_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Timestamp>* Stock::Stub::PrepareAsyncListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), cq, rpcmethod_ListenCurrentTime_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::ListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), rpcmethod_ListenCybosSubject_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosSubject(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosSubjectTickData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosSubjectTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosSubject_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::AsyncListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosSubject_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::PrepareAsyncListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosSubject_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosStockAlarm>* Stock::Stub::ListenCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::CybosStockAlarm>::Create(channel_.get(), rpcmethod_ListenCybosAlarm_, context, request);
}

void Stock::Stub::experimental_async::ListenCybosAlarm(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::CybosStockAlarm>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::CybosStockAlarm>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosAlarm_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosStockAlarm>* Stock::Stub::AsyncListenCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosStockAlarm>::Create(channel_.get(), cq, rpcmethod_ListenCybosAlarm_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosStockAlarm>* Stock::Stub::PrepareAsyncListenCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::CybosStockAlarm>::Create(channel_.get(), cq, rpcmethod_ListenCybosAlarm_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::SimulationStatus>* Stock::Stub::ListenSimulationStatusChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), rpcmethod_ListenSimulationStatusChanged_, context, request);
}

void Stock::Stub::experimental_async::ListenSimulationStatusChanged(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::SimulationStatus>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::SimulationStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenSimulationStatusChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationStatus>* Stock::Stub::AsyncListenSimulationStatusChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), cq, rpcmethod_ListenSimulationStatusChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationStatus>* Stock::Stub::PrepareAsyncListenSimulationStatusChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), cq, rpcmethod_ListenSimulationStatusChanged_, context, request, false, nullptr);
}

::grpc::Status Stock::Stub::SetSimulationStockTick(::grpc::ClientContext* context, const ::stock_api::CybosTickData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSimulationStockTick_, context, request, response);
}

void Stock::Stub::experimental_async::SetSimulationStockTick(::grpc::ClientContext* context, const ::stock_api::CybosTickData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStockTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationStockTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStockTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationStockTick(::grpc::ClientContext* context, const ::stock_api::CybosTickData* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStockTick_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetSimulationStockTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStockTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetSimulationStockTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosTickData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationStockTick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetSimulationStockTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosTickData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationStockTick_, context, request, false);
}

::grpc::Status Stock::Stub::SetSimulationBidAskTick(::grpc::ClientContext* context, const ::stock_api::CybosBidAskTickData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSimulationBidAskTick_, context, request, response);
}

void Stock::Stub::experimental_async::SetSimulationBidAskTick(::grpc::ClientContext* context, const ::stock_api::CybosBidAskTickData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationBidAskTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationBidAskTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationBidAskTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationBidAskTick(::grpc::ClientContext* context, const ::stock_api::CybosBidAskTickData* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationBidAskTick_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetSimulationBidAskTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationBidAskTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetSimulationBidAskTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosBidAskTickData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationBidAskTick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetSimulationBidAskTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosBidAskTickData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationBidAskTick_, context, request, false);
}

::grpc::Status Stock::Stub::SetSimulationSubjectTick(::grpc::ClientContext* context, const ::stock_api::CybosSubjectTickData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSimulationSubjectTick_, context, request, response);
}

void Stock::Stub::experimental_async::SetSimulationSubjectTick(::grpc::ClientContext* context, const ::stock_api::CybosSubjectTickData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationSubjectTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationSubjectTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationSubjectTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationSubjectTick(::grpc::ClientContext* context, const ::stock_api::CybosSubjectTickData* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationSubjectTick_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetSimulationSubjectTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationSubjectTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetSimulationSubjectTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosSubjectTickData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationSubjectTick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetSimulationSubjectTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosSubjectTickData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationSubjectTick_, context, request, false);
}

::grpc::Status Stock::Stub::SetSimulationAlarmTick(::grpc::ClientContext* context, const ::stock_api::CybosStockAlarm& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSimulationAlarmTick_, context, request, response);
}

void Stock::Stub::experimental_async::SetSimulationAlarmTick(::grpc::ClientContext* context, const ::stock_api::CybosStockAlarm* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationAlarmTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationAlarmTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationAlarmTick_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationAlarmTick(::grpc::ClientContext* context, const ::stock_api::CybosStockAlarm* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationAlarmTick_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetSimulationAlarmTick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationAlarmTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetSimulationAlarmTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosStockAlarm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationAlarmTick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetSimulationAlarmTickRaw(::grpc::ClientContext* context, const ::stock_api::CybosStockAlarm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationAlarmTick_, context, request, false);
}

::grpc::ClientReader< ::stock_api::SimulationOperation>* Stock::Stub::ListenSimulationOperationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::stock_api::SimulationOperation>::Create(channel_.get(), rpcmethod_ListenSimulationOperation_, context, request);
}

void Stock::Stub::experimental_async::ListenSimulationOperation(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::stock_api::SimulationOperation>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::stock_api::SimulationOperation>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenSimulationOperation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationOperation>* Stock::Stub::AsyncListenSimulationOperationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::SimulationOperation>::Create(channel_.get(), cq, rpcmethod_ListenSimulationOperation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationOperation>* Stock::Stub::PrepareAsyncListenSimulationOperationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::stock_api::SimulationOperation>::Create(channel_.get(), cq, rpcmethod_ListenSimulationOperation_, context, request, false, nullptr);
}

::grpc::Status Stock::Stub::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationOperation& request, ::stock_api::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartSimulation_, context, request, response);
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationOperation* request, ::stock_api::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationOperation* request, ::stock_api::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::StartSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::AsyncStartSimulationRaw(::grpc::ClientContext* context, const ::stock_api::SimulationOperation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Bool>::Create(channel_.get(), cq, rpcmethod_StartSimulation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::PrepareAsyncStartSimulationRaw(::grpc::ClientContext* context, const ::stock_api::SimulationOperation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::Bool>::Create(channel_.get(), cq, rpcmethod_StartSimulation_, context, request, false);
}

::grpc::Status Stock::Stub::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopSimulation_, context, request, response);
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::StopSimulation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncStopSimulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopSimulation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncStopSimulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopSimulation_, context, request, false);
}

::grpc::Status Stock::Stub::SetSimulationStatus(::grpc::ClientContext* context, const ::stock_api::SimulationStatus& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSimulationStatus_, context, request, response);
}

void Stock::Stub::experimental_async::SetSimulationStatus(::grpc::ClientContext* context, const ::stock_api::SimulationStatus* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStatus_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStatus_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::SetSimulationStatus(::grpc::ClientContext* context, const ::stock_api::SimulationStatus* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStatus_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::SetSimulationStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetSimulationStatusRaw(::grpc::ClientContext* context, const ::stock_api::SimulationStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetSimulationStatusRaw(::grpc::ClientContext* context, const ::stock_api::SimulationStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSimulationStatus_, context, request, false);
}

::grpc::Status Stock::Stub::GetSimulationStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::SimulationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSimulationStatus_, context, request, response);
}

void Stock::Stub::experimental_async::GetSimulationStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::SimulationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSimulationStatus_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetSimulationStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::SimulationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSimulationStatus_, context, request, response, std::move(f));
}

void Stock::Stub::experimental_async::GetSimulationStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::SimulationStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSimulationStatus_, context, request, response, reactor);
}

void Stock::Stub::experimental_async::GetSimulationStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::stock_api::SimulationStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSimulationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::SimulationStatus>* Stock::Stub::AsyncGetSimulationStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), cq, rpcmethod_GetSimulationStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::stock_api::SimulationStatus>* Stock::Stub::PrepareAsyncGetSimulationStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), cq, rpcmethod_GetSimulationStatus_, context, request, false);
}

Stock::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SayHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetDayData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetMinuteData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetTodayMinuteData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::PastMinuteQuery, ::stock_api::CybosDayDatas>(
          std::mem_fn(&Stock::Service::GetPastMinuteData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetSubscribeCodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::Balance>(
          std::mem_fn(&Stock::Service::GetBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn>(
          std::mem_fn(&Stock::Service::OrderStock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn>(
          std::mem_fn(&Stock::Service::ChangeOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn>(
          std::mem_fn(&Stock::Service::CancelOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosTickData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosBidAsk), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosSubject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosAlarm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::TradeMsg, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestToTrader), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RequestCybosTradeResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderResult, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::ReportOrderResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::Bool>(
          std::mem_fn(&Stock::Service::IsKospi), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::Prices>(
          std::mem_fn(&Stock::Service::GetViPrice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[19],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::TradeMsg>(
          std::mem_fn(&Stock::Service::ListenTraderMsg), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosOrderResult>(
          std::mem_fn(&Stock::Service::ListenCybosOrderResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::OrderResult>(
          std::mem_fn(&Stock::Service::ListenOrderResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetCurrentStock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Timestamp, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetCurrentDateTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::CompanyName>(
          std::mem_fn(&Stock::Service::GetCompanyName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetFavoriteList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::AddFavorite), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::RemoveFavorite), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::ClearRecentList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Timestamp, ::stock_api::TopList>(
          std::mem_fn(&Stock::Service::GetYesterdayTopAmountList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetTodayAmountRatioList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetTodayAmountMomentumList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetTodayAmountTopList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::TodayTopOption, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetTodayTopAmountList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetTodayNineThirtyList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetRecentSearch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList>(
          std::mem_fn(&Stock::Service::GetViList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[37],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::StockCodeQuery>(
          std::mem_fn(&Stock::Service::ListenCurrentStock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[38],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::ListType>(
          std::mem_fn(&Stock::Service::ListenListChanged), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[39],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosTickData>(
          std::mem_fn(&Stock::Service::ListenCybosTickData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[40],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosBidAskTickData>(
          std::mem_fn(&Stock::Service::ListenCybosBidAsk), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[41],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Timestamp>(
          std::mem_fn(&Stock::Service::ListenCurrentTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[42],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosSubjectTickData>(
          std::mem_fn(&Stock::Service::ListenCybosSubject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[43],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosStockAlarm>(
          std::mem_fn(&Stock::Service::ListenCybosAlarm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[44],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::SimulationStatus>(
          std::mem_fn(&Stock::Service::ListenSimulationStatusChanged), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CybosTickData, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetSimulationStockTick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CybosBidAskTickData, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetSimulationBidAskTick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CybosSubjectTickData, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetSimulationSubjectTick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CybosStockAlarm, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetSimulationAlarmTick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[49],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::SimulationOperation>(
          std::mem_fn(&Stock::Service::ListenSimulationOperation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::SimulationOperation, ::stock_api::Bool>(
          std::mem_fn(&Stock::Service::StartSimulation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::StopSimulation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::SimulationStatus, ::google::protobuf::Empty>(
          std::mem_fn(&Stock::Service::SetSimulationStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::SimulationStatus>(
          std::mem_fn(&Stock::Service::GetSimulationStatus), this)));
}

Stock::Service::~Service() {
}

::grpc::Status Stock::Service::SayHello(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetDayData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetMinuteData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetTodayMinuteData(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetPastMinuteData(::grpc::ServerContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetSubscribeCodes(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetBalance(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::Balance* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::OrderStock(::grpc::ServerContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ChangeOrder(::grpc::ServerContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::CancelOrder(::grpc::ServerContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosTickData(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosBidAsk(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosSubject(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosAlarm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestToTrader(::grpc::ServerContext* context, const ::stock_api::TradeMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosTradeResult(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ReportOrderResult(::grpc::ServerContext* context, const ::stock_api::OrderResult* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::IsKospi(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetViPrice(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Prices* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenTraderMsg(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::TradeMsg>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosOrderResult(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosOrderResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenOrderResult(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::OrderResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetCurrentStock(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetCurrentDateTime(::grpc::ServerContext* context, const ::google::protobuf::Timestamp* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetCompanyName(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CompanyName* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetFavoriteList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::AddFavorite(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RemoveFavorite(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ClearRecentList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetYesterdayTopAmountList(::grpc::ServerContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::TopList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetTodayAmountRatioList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetTodayAmountMomentumList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetTodayAmountTopList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetTodayTopAmountList(::grpc::ServerContext* context, const ::stock_api::TodayTopOption* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetTodayNineThirtyList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetRecentSearch(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetViList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCurrentStock(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::StockCodeQuery>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenListChanged(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::ListType>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosTickData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosBidAsk(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCurrentTime(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::google::protobuf::Timestamp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosSubject(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosSubjectTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosAlarm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosStockAlarm>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenSimulationStatusChanged(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::SimulationStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetSimulationStockTick(::grpc::ServerContext* context, const ::stock_api::CybosTickData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetSimulationBidAskTick(::grpc::ServerContext* context, const ::stock_api::CybosBidAskTickData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetSimulationSubjectTick(::grpc::ServerContext* context, const ::stock_api::CybosSubjectTickData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetSimulationAlarmTick(::grpc::ServerContext* context, const ::stock_api::CybosStockAlarm* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenSimulationOperation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::SimulationOperation>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::StartSimulation(::grpc::ServerContext* context, const ::stock_api::SimulationOperation* request, ::stock_api::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::StopSimulation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetSimulationStatus(::grpc::ServerContext* context, const ::stock_api::SimulationStatus* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetSimulationStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::SimulationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace stock_api

