// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_provider.proto

#include "stock_provider.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stock_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CybosDayData_stock_5fprovider_2eproto;
namespace stock_api {
class StockCodeQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StockCodeQuery> _instance;
} _StockCodeQuery_default_instance_;
class CodeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CodeList> _instance;
} _CodeList_default_instance_;
class StockQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StockQuery> _instance;
} _StockQuery_default_instance_;
class StockSelectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StockSelection> _instance;
} _StockSelection_default_instance_;
class PastMinuteQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PastMinuteQuery> _instance;
} _PastMinuteQuery_default_instance_;
class SimulationArgumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationArgument> _instance;
} _SimulationArgument_default_instance_;
class CybosDayDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosDayData> _instance;
} _CybosDayData_default_instance_;
class CybosDayDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosDayDatas> _instance;
} _CybosDayDatas_default_instance_;
class CybosSubjectTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosSubjectTickData> _instance;
} _CybosSubjectTickData_default_instance_;
class CybosTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosTickData> _instance;
} _CybosTickData_default_instance_;
class CybosBidAskTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosBidAskTickData> _instance;
} _CybosBidAskTickData_default_instance_;
}  // namespace stock_api
static void InitDefaultsscc_info_CodeList_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CodeList_default_instance_;
    new (ptr) ::stock_api::CodeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CodeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodeList_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CodeList_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CybosBidAskTickData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosBidAskTickData_default_instance_;
    new (ptr) ::stock_api::CybosBidAskTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosBidAskTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosBidAskTickData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosBidAskTickData_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CybosDayData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosDayData_default_instance_;
    new (ptr) ::stock_api::CybosDayData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosDayData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CybosDayData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CybosDayData_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CybosDayDatas_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosDayDatas_default_instance_;
    new (ptr) ::stock_api::CybosDayDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosDayDatas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosDayDatas_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosDayDatas_stock_5fprovider_2eproto}, {
      &scc_info_CybosDayData_stock_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_CybosSubjectTickData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosSubjectTickData_default_instance_;
    new (ptr) ::stock_api::CybosSubjectTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosSubjectTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosSubjectTickData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosSubjectTickData_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CybosTickData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosTickData_default_instance_;
    new (ptr) ::stock_api::CybosTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosTickData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosTickData_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_PastMinuteQuery_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_PastMinuteQuery_default_instance_;
    new (ptr) ::stock_api::PastMinuteQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::PastMinuteQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PastMinuteQuery_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PastMinuteQuery_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SimulationArgument_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_SimulationArgument_default_instance_;
    new (ptr) ::stock_api::SimulationArgument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::SimulationArgument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulationArgument_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimulationArgument_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StockCodeQuery_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_StockCodeQuery_default_instance_;
    new (ptr) ::stock_api::StockCodeQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::StockCodeQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StockCodeQuery_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StockCodeQuery_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_StockQuery_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_StockQuery_default_instance_;
    new (ptr) ::stock_api::StockQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::StockQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StockQuery_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StockQuery_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StockSelection_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_StockSelection_default_instance_;
    new (ptr) ::stock_api::StockSelection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::StockSelection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StockSelection_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StockSelection_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stock_5fprovider_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_stock_5fprovider_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stock_5fprovider_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stock_5fprovider_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockCodeQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockCodeQuery, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CodeList, codelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, from_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, until_datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockSelection, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockSelection, count_of_days_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockSelection, until_datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, count_of_days_),
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, today_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationArgument, from_datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, start_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, highest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, close_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, amount_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, cum_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, foreigner_hold_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, foreigner_hold_rate_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, institution_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, institution_cum_buy_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayDatas, day_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, total_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, foreigner_total_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, yesterday_diff_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, start_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, highest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, ask_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, bid_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_amount_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, current_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_sell_volume_by_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_buy_volume_by_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, time_with_sec_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, market_type_exp_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, market_type_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, out_time_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, is_kospi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, ask_prices_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, bid_prices_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, ask_remains_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, bid_remains_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, total_ask_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, total_bid_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, out_time_total_ask_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, out_time_total_bid_remain_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stock_api::StockCodeQuery)},
  { 6, -1, sizeof(::stock_api::CodeList)},
  { 12, -1, sizeof(::stock_api::StockQuery)},
  { 20, -1, sizeof(::stock_api::StockSelection)},
  { 28, -1, sizeof(::stock_api::PastMinuteQuery)},
  { 36, -1, sizeof(::stock_api::SimulationArgument)},
  { 42, -1, sizeof(::stock_api::CybosDayData)},
  { 61, -1, sizeof(::stock_api::CybosDayDatas)},
  { 67, -1, sizeof(::stock_api::CybosSubjectTickData)},
  { 81, -1, sizeof(::stock_api::CybosTickData)},
  { 110, -1, sizeof(::stock_api::CybosBidAskTickData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockCodeQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CodeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_PastMinuteQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_SimulationArgument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosDayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosDayDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosSubjectTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosBidAskTickData_default_instance_),
};

const char descriptor_table_protodef_stock_5fprovider_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024stock_provider.proto\022\tstock_api\032\037googl"
  "e/protobuf/timestamp.proto\032\033google/proto"
  "buf/empty.proto\"\036\n\016StockCodeQuery\022\014\n\004cod"
  "e\030\001 \001(\t\"\034\n\010CodeList\022\020\n\010codelist\030\001 \003(\t\"\201\001"
  "\n\nStockQuery\022\014\n\004code\030\001 \001(\t\0221\n\rfrom_datet"
  "ime\030\002 \001(\0132\032.google.protobuf.Timestamp\0222\n"
  "\016until_datetime\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\"i\n\016StockSelection\022\014\n\004code\030\001 \001("
  "\t\022\025\n\rcount_of_days\030\002 \001(\r\0222\n\016until_dateti"
  "me\030\003 \001(\0132\032.google.protobuf.Timestamp\"a\n\017"
  "PastMinuteQuery\022\014\n\004code\030\001 \001(\t\022\025\n\rcount_o"
  "f_days\030\002 \001(\r\022)\n\005today\030\003 \001(\0132\032.google.pro"
  "tobuf.Timestamp\"G\n\022SimulationArgument\0221\n"
  "\rfrom_datetime\030\001 \001(\0132\032.google.protobuf.T"
  "imestamp\"\322\002\n\014CybosDayData\022\014\n\004date\030\001 \001(\r\022"
  "\014\n\004time\030\002 \001(\r\022\023\n\013start_price\030\003 \001(\r\022\025\n\rhi"
  "ghest_price\030\004 \001(\r\022\024\n\014lowest_price\030\005 \001(\r\022"
  "\023\n\013close_price\030\006 \001(\r\022\016\n\006volume\030\007 \001(\004\022\016\n\006"
  "amount\030\010 \001(\004\022\027\n\017cum_sell_volume\030\t \001(\004\022\026\n"
  "\016cum_buy_volume\030\n \001(\004\022\035\n\025foreigner_hold_"
  "volume\030\013 \001(\003\022\033\n\023foreigner_hold_rate\030\014 \001("
  "\002\022\036\n\026institution_buy_volume\030\r \001(\003\022\"\n\032ins"
  "titution_cum_buy_volume\030\016 \001(\003\":\n\rCybosDa"
  "yDatas\022)\n\010day_data\030\001 \003(\0132\027.stock_api.Cyb"
  "osDayData\"\340\001\n\024CybosSubjectTickData\022-\n\tti"
  "ck_date\030\001 \001(\0132\032.google.protobuf.Timestam"
  "p\022\014\n\004time\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004code\030\004 "
  "\001(\t\022\024\n\014company_name\030\005 \001(\t\022\023\n\013buy_or_sell"
  "\030\006 \001(\010\022\016\n\006volume\030\007 \001(\004\022\024\n\014total_volume\030\010"
  " \001(\003\022\036\n\026foreigner_total_volume\030\t \001(\003\"\270\004\n"
  "\rCybosTickData\022-\n\ttick_date\030\001 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022\014\n\004code\030\002 \001(\t\022\024\n\014c"
  "ompany_name\030\003 \001(\t\022\026\n\016yesterday_diff\030\004 \001("
  "\005\022\014\n\004time\030\005 \001(\r\022\023\n\013start_price\030\006 \001(\r\022\025\n\r"
  "highest_price\030\007 \001(\r\022\024\n\014lowest_price\030\010 \001("
  "\r\022\021\n\task_price\030\t \001(\r\022\021\n\tbid_price\030\n \001(\r\022"
  "\022\n\ncum_volume\030\013 \001(\004\022\022\n\ncum_amount\030\014 \001(\004\022"
  "\025\n\rcurrent_price\030\r \001(\r\022\023\n\013buy_or_sell\030\016 "
  "\001(\010\022 \n\030cum_sell_volume_by_price\030\017 \001(\004\022\037\n"
  "\027cum_buy_volume_by_price\030\020 \001(\004\022\016\n\006volume"
  "\030\021 \001(\003\022\025\n\rtime_with_sec\030\022 \001(\r\022\027\n\017market_"
  "type_exp\030\023 \001(\r\022\023\n\013market_type\030\024 \001(\r\022\027\n\017o"
  "ut_time_volume\030\025 \001(\004\022\027\n\017cum_sell_volume\030"
  "\026 \001(\004\022\026\n\016cum_buy_volume\030\027 \001(\004\022\020\n\010is_kosp"
  "i\030\030 \001(\010\"\274\002\n\023CybosBidAskTickData\022-\n\ttick_"
  "date\030\001 \001(\0132\032.google.protobuf.Timestamp\022\014"
  "\n\004code\030\002 \001(\t\022\014\n\004time\030\003 \001(\r\022\016\n\006volume\030\004 \001"
  "(\004\022\022\n\nask_prices\030\005 \003(\005\022\022\n\nbid_prices\030\006 \003"
  "(\005\022\023\n\013ask_remains\030\007 \003(\r\022\023\n\013bid_remains\030\010"
  " \003(\r\022\030\n\020total_ask_remain\030\t \001(\004\022\030\n\020total_"
  "bid_remain\030\n \001(\004\022!\n\031out_time_total_ask_r"
  "emain\030\013 \001(\003\022!\n\031out_time_total_bid_remain"
  "\030\014 \001(\0032\361\010\n\005Stock\022\?\n\nGetDayData\022\025.stock_a"
  "pi.StockQuery\032\030.stock_api.CybosDayDatas\""
  "\000\022B\n\rGetMinuteData\022\025.stock_api.StockQuer"
  "y\032\030.stock_api.CybosDayDatas\"\000\022K\n\021GetPast"
  "MinuteData\022\032.stock_api.PastMinuteQuery\032\030"
  ".stock_api.CybosDayDatas\"\000\022K\n\024RequestCyb"
  "osTickData\022\031.stock_api.StockCodeQuery\032\026."
  "google.protobuf.Empty\"\000\022I\n\022RequestCybosB"
  "idAsk\022\031.stock_api.StockCodeQuery\032\026.googl"
  "e.protobuf.Empty\"\000\022J\n\023RequestCybosSubjec"
  "t\022\031.stock_api.StockCodeQuery\032\026.google.pr"
  "otobuf.Empty\"\000\022F\n\017SetCurrentStock\022\031.stoc"
  "k_api.StockSelection\032\026.google.protobuf.E"
  "mpty\"\000\022O\n\032GetYesterdayTopAmountCodes\022\032.g"
  "oogle.protobuf.Timestamp\032\023.stock_api.Cod"
  "eList\"\000\022K\n\022ListenCurrentStock\022\026.google.p"
  "rotobuf.Empty\032\031.stock_api.StockSelection"
  "\"\0000\001\022K\n\023ListenCybosTickData\022\026.google.pro"
  "tobuf.Empty\032\030.stock_api.CybosTickData\"\0000"
  "\001\022O\n\021ListenCybosBidAsk\022\026.google.protobuf"
  ".Empty\032\036.stock_api.CybosBidAskTickData\"\000"
  "0\001\022K\n\021ListenCurrentTime\022\026.google.protobu"
  "f.Empty\032\032.google.protobuf.Timestamp\"\0000\001\022"
  "Q\n\022ListenCybosSubject\022\026.google.protobuf."
  "Empty\032\037.stock_api.CybosSubjectTickData\"\000"
  "0\001\022J\n\017StartSimulation\022\035.stock_api.Simula"
  "tionArgument\032\026.google.protobuf.Empty\"\000\022B"
  "\n\016StopSimulation\022\026.google.protobuf.Empty"
  "\032\026.google.protobuf.Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stock_5fprovider_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stock_5fprovider_2eproto_sccs[11] = {
  &scc_info_CodeList_stock_5fprovider_2eproto.base,
  &scc_info_CybosBidAskTickData_stock_5fprovider_2eproto.base,
  &scc_info_CybosDayData_stock_5fprovider_2eproto.base,
  &scc_info_CybosDayDatas_stock_5fprovider_2eproto.base,
  &scc_info_CybosSubjectTickData_stock_5fprovider_2eproto.base,
  &scc_info_CybosTickData_stock_5fprovider_2eproto.base,
  &scc_info_PastMinuteQuery_stock_5fprovider_2eproto.base,
  &scc_info_SimulationArgument_stock_5fprovider_2eproto.base,
  &scc_info_StockCodeQuery_stock_5fprovider_2eproto.base,
  &scc_info_StockQuery_stock_5fprovider_2eproto.base,
  &scc_info_StockSelection_stock_5fprovider_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stock_5fprovider_2eproto_once;
static bool descriptor_table_stock_5fprovider_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stock_5fprovider_2eproto = {
  &descriptor_table_stock_5fprovider_2eproto_initialized, descriptor_table_protodef_stock_5fprovider_2eproto, "stock_provider.proto", 3234,
  &descriptor_table_stock_5fprovider_2eproto_once, descriptor_table_stock_5fprovider_2eproto_sccs, descriptor_table_stock_5fprovider_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_stock_5fprovider_2eproto::offsets,
  file_level_metadata_stock_5fprovider_2eproto, 11, file_level_enum_descriptors_stock_5fprovider_2eproto, file_level_service_descriptors_stock_5fprovider_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stock_5fprovider_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stock_5fprovider_2eproto), true);
namespace stock_api {

// ===================================================================

void StockCodeQuery::InitAsDefaultInstance() {
}
class StockCodeQuery::_Internal {
 public:
};

StockCodeQuery::StockCodeQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.StockCodeQuery)
}
StockCodeQuery::StockCodeQuery(const StockCodeQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.StockCodeQuery)
}

void StockCodeQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StockCodeQuery_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StockCodeQuery::~StockCodeQuery() {
  // @@protoc_insertion_point(destructor:stock_api.StockCodeQuery)
  SharedDtor();
}

void StockCodeQuery::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StockCodeQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StockCodeQuery& StockCodeQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StockCodeQuery_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void StockCodeQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockCodeQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StockCodeQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockCodeQuery.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockCodeQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockCodeQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockCodeQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockCodeQuery)
  return target;
}

size_t StockCodeQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockCodeQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockCodeQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.StockCodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const StockCodeQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockCodeQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.StockCodeQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.StockCodeQuery)
    MergeFrom(*source);
  }
}

void StockCodeQuery::MergeFrom(const StockCodeQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockCodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void StockCodeQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.StockCodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockCodeQuery::CopyFrom(const StockCodeQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockCodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCodeQuery::IsInitialized() const {
  return true;
}

void StockCodeQuery::InternalSwap(StockCodeQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StockCodeQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CodeList::InitAsDefaultInstance() {
}
class CodeList::_Internal {
 public:
};

CodeList::CodeList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CodeList)
}
CodeList::CodeList(const CodeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      codelist_(from.codelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CodeList)
}

void CodeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CodeList_stock_5fprovider_2eproto.base);
}

CodeList::~CodeList() {
  // @@protoc_insertion_point(destructor:stock_api.CodeList)
  SharedDtor();
}

void CodeList::SharedDtor() {
}

void CodeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CodeList& CodeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CodeList_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codelist_.Clear();
  _internal_metadata_.Clear();
}

const char* CodeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string codelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_codelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CodeList.codelist"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CodeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codelist = 1;
  for (int i = 0, n = this->_internal_codelist_size(); i < n; i++) {
    const auto& s = this->_internal_codelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CodeList.codelist");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CodeList)
  return target;
}

size_t CodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CodeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string codelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(codelist_.size());
  for (int i = 0, n = codelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      codelist_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CodeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CodeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CodeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CodeList)
    MergeFrom(*source);
  }
}

void CodeList::MergeFrom(const CodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CodeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codelist_.MergeFrom(from.codelist_);
}

void CodeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeList::CopyFrom(const CodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeList::IsInitialized() const {
  return true;
}

void CodeList::InternalSwap(CodeList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  codelist_.InternalSwap(&other->codelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StockQuery::InitAsDefaultInstance() {
  ::stock_api::_StockQuery_default_instance_._instance.get_mutable()->from_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::stock_api::_StockQuery_default_instance_._instance.get_mutable()->until_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StockQuery::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime(const StockQuery* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime(const StockQuery* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StockQuery::_Internal::from_datetime(const StockQuery* msg) {
  return *msg->from_datetime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StockQuery::_Internal::until_datetime(const StockQuery* msg) {
  return *msg->until_datetime_;
}
void StockQuery::clear_from_datetime() {
  if (GetArenaNoVirtual() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
}
void StockQuery::clear_until_datetime() {
  if (GetArenaNoVirtual() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
}
StockQuery::StockQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.StockQuery)
}
StockQuery::StockQuery(const StockQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_from_datetime()) {
    from_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.from_datetime_);
  } else {
    from_datetime_ = nullptr;
  }
  if (from._internal_has_until_datetime()) {
    until_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.until_datetime_);
  } else {
    until_datetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.StockQuery)
}

void StockQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StockQuery_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&until_datetime_) -
      reinterpret_cast<char*>(&from_datetime_)) + sizeof(until_datetime_));
}

StockQuery::~StockQuery() {
  // @@protoc_insertion_point(destructor:stock_api.StockQuery)
  SharedDtor();
}

void StockQuery::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_datetime_;
  if (this != internal_default_instance()) delete until_datetime_;
}

void StockQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StockQuery& StockQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StockQuery_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void StockQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StockQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockQuery.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from_datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp until_datetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_until_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->has_from_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->has_until_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::until_datetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockQuery)
  return target;
}

size_t StockQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->has_from_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_datetime_);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->has_until_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *until_datetime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.StockQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.StockQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.StockQuery)
    MergeFrom(*source);
  }
}

void StockQuery::MergeFrom(const StockQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_from_datetime()) {
    _internal_mutable_from_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_from_datetime());
  }
  if (from.has_until_datetime()) {
    _internal_mutable_until_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_until_datetime());
  }
}

void StockQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.StockQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQuery::CopyFrom(const StockQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQuery::IsInitialized() const {
  return true;
}

void StockQuery::InternalSwap(StockQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_datetime_, other->from_datetime_);
  swap(until_datetime_, other->until_datetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StockSelection::InitAsDefaultInstance() {
  ::stock_api::_StockSelection_default_instance_._instance.get_mutable()->until_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StockSelection::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime(const StockSelection* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StockSelection::_Internal::until_datetime(const StockSelection* msg) {
  return *msg->until_datetime_;
}
void StockSelection::clear_until_datetime() {
  if (GetArenaNoVirtual() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
}
StockSelection::StockSelection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.StockSelection)
}
StockSelection::StockSelection(const StockSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_until_datetime()) {
    until_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.until_datetime_);
  } else {
    until_datetime_ = nullptr;
  }
  count_of_days_ = from.count_of_days_;
  // @@protoc_insertion_point(copy_constructor:stock_api.StockSelection)
}

void StockSelection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StockSelection_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&until_datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_of_days_) -
      reinterpret_cast<char*>(&until_datetime_)) + sizeof(count_of_days_));
}

StockSelection::~StockSelection() {
  // @@protoc_insertion_point(destructor:stock_api.StockSelection)
  SharedDtor();
}

void StockSelection::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete until_datetime_;
}

void StockSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StockSelection& StockSelection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StockSelection_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void StockSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
  count_of_days_ = 0u;
  _internal_metadata_.Clear();
}

const char* StockSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockSelection.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count_of_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_of_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp until_datetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_until_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockSelection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockSelection.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // uint32 count_of_days = 2;
  if (this->count_of_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_of_days(), target);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->has_until_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::until_datetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockSelection)
  return target;
}

size_t StockSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockSelection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->has_until_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *until_datetime_);
  }

  // uint32 count_of_days = 2;
  if (this->count_of_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count_of_days());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockSelection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.StockSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const StockSelection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockSelection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.StockSelection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.StockSelection)
    MergeFrom(*source);
  }
}

void StockSelection::MergeFrom(const StockSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_until_datetime()) {
    _internal_mutable_until_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_until_datetime());
  }
  if (from.count_of_days() != 0) {
    _internal_set_count_of_days(from._internal_count_of_days());
  }
}

void StockSelection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.StockSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockSelection::CopyFrom(const StockSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockSelection::IsInitialized() const {
  return true;
}

void StockSelection::InternalSwap(StockSelection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(until_datetime_, other->until_datetime_);
  swap(count_of_days_, other->count_of_days_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockSelection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PastMinuteQuery::InitAsDefaultInstance() {
  ::stock_api::_PastMinuteQuery_default_instance_._instance.get_mutable()->today_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PastMinuteQuery::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& today(const PastMinuteQuery* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PastMinuteQuery::_Internal::today(const PastMinuteQuery* msg) {
  return *msg->today_;
}
void PastMinuteQuery::clear_today() {
  if (GetArenaNoVirtual() == nullptr && today_ != nullptr) {
    delete today_;
  }
  today_ = nullptr;
}
PastMinuteQuery::PastMinuteQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.PastMinuteQuery)
}
PastMinuteQuery::PastMinuteQuery(const PastMinuteQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_today()) {
    today_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.today_);
  } else {
    today_ = nullptr;
  }
  count_of_days_ = from.count_of_days_;
  // @@protoc_insertion_point(copy_constructor:stock_api.PastMinuteQuery)
}

void PastMinuteQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PastMinuteQuery_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&today_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_of_days_) -
      reinterpret_cast<char*>(&today_)) + sizeof(count_of_days_));
}

PastMinuteQuery::~PastMinuteQuery() {
  // @@protoc_insertion_point(destructor:stock_api.PastMinuteQuery)
  SharedDtor();
}

void PastMinuteQuery::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete today_;
}

void PastMinuteQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PastMinuteQuery& PastMinuteQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PastMinuteQuery_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void PastMinuteQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.PastMinuteQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && today_ != nullptr) {
    delete today_;
  }
  today_ = nullptr;
  count_of_days_ = 0u;
  _internal_metadata_.Clear();
}

const char* PastMinuteQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.PastMinuteQuery.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count_of_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_of_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp today = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_today(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PastMinuteQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.PastMinuteQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.PastMinuteQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // uint32 count_of_days = 2;
  if (this->count_of_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_of_days(), target);
  }

  // .google.protobuf.Timestamp today = 3;
  if (this->has_today()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::today(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.PastMinuteQuery)
  return target;
}

size_t PastMinuteQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.PastMinuteQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp today = 3;
  if (this->has_today()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *today_);
  }

  // uint32 count_of_days = 2;
  if (this->count_of_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count_of_days());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PastMinuteQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.PastMinuteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const PastMinuteQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PastMinuteQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.PastMinuteQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.PastMinuteQuery)
    MergeFrom(*source);
  }
}

void PastMinuteQuery::MergeFrom(const PastMinuteQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.PastMinuteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_today()) {
    _internal_mutable_today()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_today());
  }
  if (from.count_of_days() != 0) {
    _internal_set_count_of_days(from._internal_count_of_days());
  }
}

void PastMinuteQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.PastMinuteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastMinuteQuery::CopyFrom(const PastMinuteQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.PastMinuteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastMinuteQuery::IsInitialized() const {
  return true;
}

void PastMinuteQuery::InternalSwap(PastMinuteQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(today_, other->today_);
  swap(count_of_days_, other->count_of_days_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PastMinuteQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulationArgument::InitAsDefaultInstance() {
  ::stock_api::_SimulationArgument_default_instance_._instance.get_mutable()->from_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SimulationArgument::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime(const SimulationArgument* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SimulationArgument::_Internal::from_datetime(const SimulationArgument* msg) {
  return *msg->from_datetime_;
}
void SimulationArgument::clear_from_datetime() {
  if (GetArenaNoVirtual() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
}
SimulationArgument::SimulationArgument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.SimulationArgument)
}
SimulationArgument::SimulationArgument(const SimulationArgument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_from_datetime()) {
    from_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.from_datetime_);
  } else {
    from_datetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.SimulationArgument)
}

void SimulationArgument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationArgument_stock_5fprovider_2eproto.base);
  from_datetime_ = nullptr;
}

SimulationArgument::~SimulationArgument() {
  // @@protoc_insertion_point(destructor:stock_api.SimulationArgument)
  SharedDtor();
}

void SimulationArgument::SharedDtor() {
  if (this != internal_default_instance()) delete from_datetime_;
}

void SimulationArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationArgument& SimulationArgument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationArgument_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void SimulationArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.SimulationArgument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SimulationArgument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp from_datetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationArgument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.SimulationArgument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp from_datetime = 1;
  if (this->has_from_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from_datetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.SimulationArgument)
  return target;
}

size_t SimulationArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.SimulationArgument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp from_datetime = 1;
  if (this->has_from_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_datetime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationArgument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.SimulationArgument)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationArgument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationArgument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.SimulationArgument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.SimulationArgument)
    MergeFrom(*source);
  }
}

void SimulationArgument::MergeFrom(const SimulationArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.SimulationArgument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from_datetime()) {
    _internal_mutable_from_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_from_datetime());
  }
}

void SimulationArgument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.SimulationArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationArgument::CopyFrom(const SimulationArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.SimulationArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationArgument::IsInitialized() const {
  return true;
}

void SimulationArgument::InternalSwap(SimulationArgument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_datetime_, other->from_datetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationArgument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosDayData::InitAsDefaultInstance() {
}
class CybosDayData::_Internal {
 public:
};

CybosDayData::CybosDayData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosDayData)
}
CybosDayData::CybosDayData(const CybosDayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreigner_hold_rate_) -
    reinterpret_cast<char*>(&date_)) + sizeof(foreigner_hold_rate_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosDayData)
}

void CybosDayData::SharedCtor() {
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_hold_rate_) -
      reinterpret_cast<char*>(&date_)) + sizeof(foreigner_hold_rate_));
}

CybosDayData::~CybosDayData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosDayData)
  SharedDtor();
}

void CybosDayData::SharedDtor() {
}

void CybosDayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosDayData& CybosDayData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosDayData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosDayData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosDayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_hold_rate_) -
      reinterpret_cast<char*>(&date_)) + sizeof(foreigner_hold_rate_));
  _internal_metadata_.Clear();
}

const char* CybosDayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowest_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_sell_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cum_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_buy_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 foreigner_hold_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          foreigner_hold_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float foreigner_hold_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          foreigner_hold_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 institution_buy_volume = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          institution_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 institution_cum_buy_volume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          institution_cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosDayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosDayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 date = 1;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_date(), target);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // uint32 start_price = 3;
  if (this->start_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_price(), target);
  }

  // uint32 highest_price = 4;
  if (this->highest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_highest_price(), target);
  }

  // uint32 lowest_price = 5;
  if (this->lowest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lowest_price(), target);
  }

  // uint32 close_price = 6;
  if (this->close_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_close_price(), target);
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume(), target);
  }

  // uint64 amount = 8;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_amount(), target);
  }

  // uint64 cum_sell_volume = 9;
  if (this->cum_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_cum_sell_volume(), target);
  }

  // uint64 cum_buy_volume = 10;
  if (this->cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_cum_buy_volume(), target);
  }

  // int64 foreigner_hold_volume = 11;
  if (this->foreigner_hold_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_foreigner_hold_volume(), target);
  }

  // float foreigner_hold_rate = 12;
  if (!(this->foreigner_hold_rate() <= 0 && this->foreigner_hold_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_foreigner_hold_rate(), target);
  }

  // int64 institution_buy_volume = 13;
  if (this->institution_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_institution_buy_volume(), target);
  }

  // int64 institution_cum_buy_volume = 14;
  if (this->institution_cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_institution_cum_buy_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosDayData)
  return target;
}

size_t CybosDayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosDayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 date = 1;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_date());
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 start_price = 3;
  if (this->start_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_price());
  }

  // uint32 highest_price = 4;
  if (this->highest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highest_price());
  }

  // uint32 lowest_price = 5;
  if (this->lowest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lowest_price());
  }

  // uint32 close_price = 6;
  if (this->close_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_close_price());
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // uint64 amount = 8;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 cum_sell_volume = 9;
  if (this->cum_sell_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume());
  }

  // uint64 cum_buy_volume = 10;
  if (this->cum_buy_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume());
  }

  // int64 foreigner_hold_volume = 11;
  if (this->foreigner_hold_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_foreigner_hold_volume());
  }

  // int64 institution_buy_volume = 13;
  if (this->institution_buy_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_institution_buy_volume());
  }

  // int64 institution_cum_buy_volume = 14;
  if (this->institution_cum_buy_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_institution_cum_buy_volume());
  }

  // float foreigner_hold_rate = 12;
  if (!(this->foreigner_hold_rate() <= 0 && this->foreigner_hold_rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosDayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosDayData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosDayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosDayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosDayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosDayData)
    MergeFrom(*source);
  }
}

void CybosDayData::MergeFrom(const CybosDayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosDayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.start_price() != 0) {
    _internal_set_start_price(from._internal_start_price());
  }
  if (from.highest_price() != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from.lowest_price() != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (from.close_price() != 0) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.cum_sell_volume() != 0) {
    _internal_set_cum_sell_volume(from._internal_cum_sell_volume());
  }
  if (from.cum_buy_volume() != 0) {
    _internal_set_cum_buy_volume(from._internal_cum_buy_volume());
  }
  if (from.foreigner_hold_volume() != 0) {
    _internal_set_foreigner_hold_volume(from._internal_foreigner_hold_volume());
  }
  if (from.institution_buy_volume() != 0) {
    _internal_set_institution_buy_volume(from._internal_institution_buy_volume());
  }
  if (from.institution_cum_buy_volume() != 0) {
    _internal_set_institution_cum_buy_volume(from._internal_institution_cum_buy_volume());
  }
  if (!(from.foreigner_hold_rate() <= 0 && from.foreigner_hold_rate() >= 0)) {
    _internal_set_foreigner_hold_rate(from._internal_foreigner_hold_rate());
  }
}

void CybosDayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosDayData::CopyFrom(const CybosDayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosDayData::IsInitialized() const {
  return true;
}

void CybosDayData::InternalSwap(CybosDayData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(date_, other->date_);
  swap(time_, other->time_);
  swap(start_price_, other->start_price_);
  swap(highest_price_, other->highest_price_);
  swap(lowest_price_, other->lowest_price_);
  swap(close_price_, other->close_price_);
  swap(volume_, other->volume_);
  swap(amount_, other->amount_);
  swap(cum_sell_volume_, other->cum_sell_volume_);
  swap(cum_buy_volume_, other->cum_buy_volume_);
  swap(foreigner_hold_volume_, other->foreigner_hold_volume_);
  swap(institution_buy_volume_, other->institution_buy_volume_);
  swap(institution_cum_buy_volume_, other->institution_cum_buy_volume_);
  swap(foreigner_hold_rate_, other->foreigner_hold_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosDayData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosDayDatas::InitAsDefaultInstance() {
}
class CybosDayDatas::_Internal {
 public:
};

CybosDayDatas::CybosDayDatas()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosDayDatas)
}
CybosDayDatas::CybosDayDatas(const CybosDayDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      day_data_(from.day_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosDayDatas)
}

void CybosDayDatas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosDayDatas_stock_5fprovider_2eproto.base);
}

CybosDayDatas::~CybosDayDatas() {
  // @@protoc_insertion_point(destructor:stock_api.CybosDayDatas)
  SharedDtor();
}

void CybosDayDatas::SharedDtor() {
}

void CybosDayDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosDayDatas& CybosDayDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosDayDatas_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosDayDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosDayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_data_.Clear();
  _internal_metadata_.Clear();
}

const char* CybosDayDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .stock_api.CybosDayData day_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosDayDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosDayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .stock_api.CybosDayData day_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_day_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_day_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosDayDatas)
  return target;
}

size_t CybosDayDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosDayDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.CybosDayData day_data = 1;
  total_size += 1UL * this->_internal_day_data_size();
  for (const auto& msg : this->day_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosDayDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosDayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosDayDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosDayDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosDayDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosDayDatas)
    MergeFrom(*source);
  }
}

void CybosDayDatas::MergeFrom(const CybosDayDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosDayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  day_data_.MergeFrom(from.day_data_);
}

void CybosDayDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosDayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosDayDatas::CopyFrom(const CybosDayDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosDayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosDayDatas::IsInitialized() const {
  return true;
}

void CybosDayDatas::InternalSwap(CybosDayDatas* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  day_data_.InternalSwap(&other->day_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosDayDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosSubjectTickData::InitAsDefaultInstance() {
  ::stock_api::_CybosSubjectTickData_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosSubjectTickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosSubjectTickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosSubjectTickData::_Internal::tick_date(const CybosSubjectTickData* msg) {
  return *msg->tick_date_;
}
void CybosSubjectTickData::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosSubjectTickData::CybosSubjectTickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosSubjectTickData)
}
CybosSubjectTickData::CybosSubjectTickData(const CybosSubjectTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreigner_total_volume_) -
    reinterpret_cast<char*>(&time_)) + sizeof(foreigner_total_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosSubjectTickData)
}

void CybosSubjectTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosSubjectTickData_stock_5fprovider_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_total_volume_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(foreigner_total_volume_));
}

CybosSubjectTickData::~CybosSubjectTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosSubjectTickData)
  SharedDtor();
}

void CybosSubjectTickData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosSubjectTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosSubjectTickData& CybosSubjectTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosSubjectTickData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosSubjectTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosSubjectTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_total_volume_) -
      reinterpret_cast<char*>(&time_)) + sizeof(foreigner_total_volume_));
  _internal_metadata_.Clear();
}

const char* CybosSubjectTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool buy_or_sell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 foreigner_total_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          foreigner_total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosSubjectTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosSubjectTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string code = 4;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // bool buy_or_sell = 6;
  if (this->buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_buy_or_sell(), target);
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume(), target);
  }

  // int64 total_volume = 8;
  if (this->total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_volume(), target);
  }

  // int64 foreigner_total_volume = 9;
  if (this->foreigner_total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_foreigner_total_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosSubjectTickData)
  return target;
}

size_t CybosSubjectTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosSubjectTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 4;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // bool buy_or_sell = 6;
  if (this->buy_or_sell() != 0) {
    total_size += 1 + 1;
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // int64 total_volume = 8;
  if (this->total_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_volume());
  }

  // int64 foreigner_total_volume = 9;
  if (this->foreigner_total_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_foreigner_total_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosSubjectTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosSubjectTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosSubjectTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosSubjectTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosSubjectTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosSubjectTickData)
    MergeFrom(*source);
  }
}

void CybosSubjectTickData::MergeFrom(const CybosSubjectTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosSubjectTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.buy_or_sell() != 0) {
    _internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.total_volume() != 0) {
    _internal_set_total_volume(from._internal_total_volume());
  }
  if (from.foreigner_total_volume() != 0) {
    _internal_set_foreigner_total_volume(from._internal_foreigner_total_volume());
  }
}

void CybosSubjectTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosSubjectTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosSubjectTickData::CopyFrom(const CybosSubjectTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosSubjectTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosSubjectTickData::IsInitialized() const {
  return true;
}

void CybosSubjectTickData::InternalSwap(CybosSubjectTickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(time_, other->time_);
  swap(buy_or_sell_, other->buy_or_sell_);
  swap(volume_, other->volume_);
  swap(total_volume_, other->total_volume_);
  swap(foreigner_total_volume_, other->foreigner_total_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosSubjectTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosTickData::InitAsDefaultInstance() {
  ::stock_api::_CybosTickData_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosTickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosTickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosTickData::_Internal::tick_date(const CybosTickData* msg) {
  return *msg->tick_date_;
}
void CybosTickData::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosTickData::CybosTickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosTickData)
}
CybosTickData::CybosTickData(const CybosTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&yesterday_diff_, &from.yesterday_diff_,
    static_cast<size_t>(reinterpret_cast<char*>(&cum_buy_volume_) -
    reinterpret_cast<char*>(&yesterday_diff_)) + sizeof(cum_buy_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosTickData)
}

void CybosTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosTickData_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cum_buy_volume_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(cum_buy_volume_));
}

CybosTickData::~CybosTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosTickData)
  SharedDtor();
}

void CybosTickData::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosTickData& CybosTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosTickData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&yesterday_diff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cum_buy_volume_) -
      reinterpret_cast<char*>(&yesterday_diff_)) + sizeof(cum_buy_volume_));
  _internal_metadata_.Clear();
}

const char* CybosTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosTickData.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosTickData.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yesterday_diff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          yesterday_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowest_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ask_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bid_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cum_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_amount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cum_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          current_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool buy_or_sell = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_sell_volume_by_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          cum_sell_volume_by_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_buy_volume_by_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          cum_buy_volume_by_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_with_sec = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          time_with_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 market_type_exp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          market_type_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 market_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          market_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 out_time_volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          out_time_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_sell_volume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          cum_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_buy_volume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_kospi = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_kospi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosTickData.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string company_name = 3;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosTickData.company_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_company_name(), target);
  }

  // int32 yesterday_diff = 4;
  if (this->yesterday_diff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_yesterday_diff(), target);
  }

  // uint32 time = 5;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  // uint32 start_price = 6;
  if (this->start_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_price(), target);
  }

  // uint32 highest_price = 7;
  if (this->highest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_highest_price(), target);
  }

  // uint32 lowest_price = 8;
  if (this->lowest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lowest_price(), target);
  }

  // uint32 ask_price = 9;
  if (this->ask_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ask_price(), target);
  }

  // uint32 bid_price = 10;
  if (this->bid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bid_price(), target);
  }

  // uint64 cum_volume = 11;
  if (this->cum_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_cum_volume(), target);
  }

  // uint64 cum_amount = 12;
  if (this->cum_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_cum_amount(), target);
  }

  // uint32 current_price = 13;
  if (this->current_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_current_price(), target);
  }

  // bool buy_or_sell = 14;
  if (this->buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_buy_or_sell(), target);
  }

  // uint64 cum_sell_volume_by_price = 15;
  if (this->cum_sell_volume_by_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_cum_sell_volume_by_price(), target);
  }

  // uint64 cum_buy_volume_by_price = 16;
  if (this->cum_buy_volume_by_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_cum_buy_volume_by_price(), target);
  }

  // int64 volume = 17;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_volume(), target);
  }

  // uint32 time_with_sec = 18;
  if (this->time_with_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_time_with_sec(), target);
  }

  // uint32 market_type_exp = 19;
  if (this->market_type_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_market_type_exp(), target);
  }

  // uint32 market_type = 20;
  if (this->market_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_market_type(), target);
  }

  // uint64 out_time_volume = 21;
  if (this->out_time_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_out_time_volume(), target);
  }

  // uint64 cum_sell_volume = 22;
  if (this->cum_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_cum_sell_volume(), target);
  }

  // uint64 cum_buy_volume = 23;
  if (this->cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_cum_buy_volume(), target);
  }

  // bool is_kospi = 24;
  if (this->is_kospi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_kospi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosTickData)
  return target;
}

size_t CybosTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 3;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // int32 yesterday_diff = 4;
  if (this->yesterday_diff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yesterday_diff());
  }

  // uint32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 start_price = 6;
  if (this->start_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_price());
  }

  // uint32 highest_price = 7;
  if (this->highest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highest_price());
  }

  // uint32 lowest_price = 8;
  if (this->lowest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lowest_price());
  }

  // uint32 ask_price = 9;
  if (this->ask_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ask_price());
  }

  // uint64 cum_volume = 11;
  if (this->cum_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_volume());
  }

  // uint32 bid_price = 10;
  if (this->bid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bid_price());
  }

  // uint32 current_price = 13;
  if (this->current_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_price());
  }

  // uint64 cum_amount = 12;
  if (this->cum_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_amount());
  }

  // uint64 cum_sell_volume_by_price = 15;
  if (this->cum_sell_volume_by_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume_by_price());
  }

  // uint64 cum_buy_volume_by_price = 16;
  if (this->cum_buy_volume_by_price() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume_by_price());
  }

  // int64 volume = 17;
  if (this->volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // uint32 time_with_sec = 18;
  if (this->time_with_sec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_with_sec());
  }

  // uint32 market_type_exp = 19;
  if (this->market_type_exp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_market_type_exp());
  }

  // bool buy_or_sell = 14;
  if (this->buy_or_sell() != 0) {
    total_size += 1 + 1;
  }

  // bool is_kospi = 24;
  if (this->is_kospi() != 0) {
    total_size += 2 + 1;
  }

  // uint32 market_type = 20;
  if (this->market_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_market_type());
  }

  // uint64 out_time_volume = 21;
  if (this->out_time_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_time_volume());
  }

  // uint64 cum_sell_volume = 22;
  if (this->cum_sell_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume());
  }

  // uint64 cum_buy_volume = 23;
  if (this->cum_buy_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosTickData)
    MergeFrom(*source);
  }
}

void CybosTickData::MergeFrom(const CybosTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.yesterday_diff() != 0) {
    _internal_set_yesterday_diff(from._internal_yesterday_diff());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.start_price() != 0) {
    _internal_set_start_price(from._internal_start_price());
  }
  if (from.highest_price() != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from.lowest_price() != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (from.ask_price() != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from.cum_volume() != 0) {
    _internal_set_cum_volume(from._internal_cum_volume());
  }
  if (from.bid_price() != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from.current_price() != 0) {
    _internal_set_current_price(from._internal_current_price());
  }
  if (from.cum_amount() != 0) {
    _internal_set_cum_amount(from._internal_cum_amount());
  }
  if (from.cum_sell_volume_by_price() != 0) {
    _internal_set_cum_sell_volume_by_price(from._internal_cum_sell_volume_by_price());
  }
  if (from.cum_buy_volume_by_price() != 0) {
    _internal_set_cum_buy_volume_by_price(from._internal_cum_buy_volume_by_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.time_with_sec() != 0) {
    _internal_set_time_with_sec(from._internal_time_with_sec());
  }
  if (from.market_type_exp() != 0) {
    _internal_set_market_type_exp(from._internal_market_type_exp());
  }
  if (from.buy_or_sell() != 0) {
    _internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from.is_kospi() != 0) {
    _internal_set_is_kospi(from._internal_is_kospi());
  }
  if (from.market_type() != 0) {
    _internal_set_market_type(from._internal_market_type());
  }
  if (from.out_time_volume() != 0) {
    _internal_set_out_time_volume(from._internal_out_time_volume());
  }
  if (from.cum_sell_volume() != 0) {
    _internal_set_cum_sell_volume(from._internal_cum_sell_volume());
  }
  if (from.cum_buy_volume() != 0) {
    _internal_set_cum_buy_volume(from._internal_cum_buy_volume());
  }
}

void CybosTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosTickData::CopyFrom(const CybosTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosTickData::IsInitialized() const {
  return true;
}

void CybosTickData::InternalSwap(CybosTickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(yesterday_diff_, other->yesterday_diff_);
  swap(time_, other->time_);
  swap(start_price_, other->start_price_);
  swap(highest_price_, other->highest_price_);
  swap(lowest_price_, other->lowest_price_);
  swap(ask_price_, other->ask_price_);
  swap(cum_volume_, other->cum_volume_);
  swap(bid_price_, other->bid_price_);
  swap(current_price_, other->current_price_);
  swap(cum_amount_, other->cum_amount_);
  swap(cum_sell_volume_by_price_, other->cum_sell_volume_by_price_);
  swap(cum_buy_volume_by_price_, other->cum_buy_volume_by_price_);
  swap(volume_, other->volume_);
  swap(time_with_sec_, other->time_with_sec_);
  swap(market_type_exp_, other->market_type_exp_);
  swap(buy_or_sell_, other->buy_or_sell_);
  swap(is_kospi_, other->is_kospi_);
  swap(market_type_, other->market_type_);
  swap(out_time_volume_, other->out_time_volume_);
  swap(cum_sell_volume_, other->cum_sell_volume_);
  swap(cum_buy_volume_, other->cum_buy_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosBidAskTickData::InitAsDefaultInstance() {
  ::stock_api::_CybosBidAskTickData_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosBidAskTickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosBidAskTickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosBidAskTickData::_Internal::tick_date(const CybosBidAskTickData* msg) {
  return *msg->tick_date_;
}
void CybosBidAskTickData::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosBidAskTickData::CybosBidAskTickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosBidAskTickData)
}
CybosBidAskTickData::CybosBidAskTickData(const CybosBidAskTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ask_prices_(from.ask_prices_),
      bid_prices_(from.bid_prices_),
      ask_remains_(from.ask_remains_),
      bid_remains_(from.bid_remains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosBidAskTickData)
}

void CybosBidAskTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosBidAskTickData_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(time_));
}

CybosBidAskTickData::~CybosBidAskTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosBidAskTickData)
  SharedDtor();
}

void CybosBidAskTickData::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosBidAskTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosBidAskTickData& CybosBidAskTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosBidAskTickData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosBidAskTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosBidAskTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_prices_.Clear();
  bid_prices_.Clear();
  ask_remains_.Clear();
  bid_remains_.Clear();
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

const char* CybosBidAskTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosBidAskTickData.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ask_prices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ask_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_ask_prices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bid_prices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bid_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_bid_prices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ask_remains = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ask_remains(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_ask_remains(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bid_remains = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bid_remains(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_bid_remains(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_ask_remain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          total_ask_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_bid_remain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          total_bid_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 out_time_total_ask_remain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          out_time_total_ask_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 out_time_total_bid_remain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          out_time_total_bid_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosBidAskTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosBidAskTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosBidAskTickData.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // uint64 volume = 4;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_volume(), target);
  }

  // repeated int32 ask_prices = 5;
  {
    int byte_size = _ask_prices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_ask_prices(), byte_size, target);
    }
  }

  // repeated int32 bid_prices = 6;
  {
    int byte_size = _bid_prices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_bid_prices(), byte_size, target);
    }
  }

  // repeated uint32 ask_remains = 7;
  {
    int byte_size = _ask_remains_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_ask_remains(), byte_size, target);
    }
  }

  // repeated uint32 bid_remains = 8;
  {
    int byte_size = _bid_remains_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_bid_remains(), byte_size, target);
    }
  }

  // uint64 total_ask_remain = 9;
  if (this->total_ask_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total_ask_remain(), target);
  }

  // uint64 total_bid_remain = 10;
  if (this->total_bid_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_bid_remain(), target);
  }

  // int64 out_time_total_ask_remain = 11;
  if (this->out_time_total_ask_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_out_time_total_ask_remain(), target);
  }

  // int64 out_time_total_bid_remain = 12;
  if (this->out_time_total_bid_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_out_time_total_bid_remain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosBidAskTickData)
  return target;
}

size_t CybosBidAskTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosBidAskTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ask_prices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ask_prices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ask_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bid_prices = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bid_prices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bid_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ask_remains = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ask_remains_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ask_remains_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bid_remains = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bid_remains_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bid_remains_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint64 volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // uint64 total_ask_remain = 9;
  if (this->total_ask_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_ask_remain());
  }

  // uint64 total_bid_remain = 10;
  if (this->total_bid_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_bid_remain());
  }

  // int64 out_time_total_ask_remain = 11;
  if (this->out_time_total_ask_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_out_time_total_ask_remain());
  }

  // int64 out_time_total_bid_remain = 12;
  if (this->out_time_total_bid_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_out_time_total_bid_remain());
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosBidAskTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosBidAskTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosBidAskTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosBidAskTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosBidAskTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosBidAskTickData)
    MergeFrom(*source);
  }
}

void CybosBidAskTickData::MergeFrom(const CybosBidAskTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosBidAskTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ask_prices_.MergeFrom(from.ask_prices_);
  bid_prices_.MergeFrom(from.bid_prices_);
  ask_remains_.MergeFrom(from.ask_remains_);
  bid_remains_.MergeFrom(from.bid_remains_);
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.total_ask_remain() != 0) {
    _internal_set_total_ask_remain(from._internal_total_ask_remain());
  }
  if (from.total_bid_remain() != 0) {
    _internal_set_total_bid_remain(from._internal_total_bid_remain());
  }
  if (from.out_time_total_ask_remain() != 0) {
    _internal_set_out_time_total_ask_remain(from._internal_out_time_total_ask_remain());
  }
  if (from.out_time_total_bid_remain() != 0) {
    _internal_set_out_time_total_bid_remain(from._internal_out_time_total_bid_remain());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void CybosBidAskTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosBidAskTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosBidAskTickData::CopyFrom(const CybosBidAskTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosBidAskTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosBidAskTickData::IsInitialized() const {
  return true;
}

void CybosBidAskTickData::InternalSwap(CybosBidAskTickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ask_prices_.InternalSwap(&other->ask_prices_);
  bid_prices_.InternalSwap(&other->bid_prices_);
  ask_remains_.InternalSwap(&other->ask_remains_);
  bid_remains_.InternalSwap(&other->bid_remains_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(volume_, other->volume_);
  swap(total_ask_remain_, other->total_ask_remain_);
  swap(total_bid_remain_, other->total_bid_remain_);
  swap(out_time_total_ask_remain_, other->out_time_total_ask_remain_);
  swap(out_time_total_bid_remain_, other->out_time_total_bid_remain_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosBidAskTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stock_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stock_api::StockCodeQuery* Arena::CreateMaybeMessage< ::stock_api::StockCodeQuery >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::StockCodeQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CodeList* Arena::CreateMaybeMessage< ::stock_api::CodeList >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CodeList >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::StockQuery* Arena::CreateMaybeMessage< ::stock_api::StockQuery >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::StockQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::StockSelection* Arena::CreateMaybeMessage< ::stock_api::StockSelection >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::StockSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::PastMinuteQuery* Arena::CreateMaybeMessage< ::stock_api::PastMinuteQuery >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::PastMinuteQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::SimulationArgument* Arena::CreateMaybeMessage< ::stock_api::SimulationArgument >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::SimulationArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosDayData* Arena::CreateMaybeMessage< ::stock_api::CybosDayData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosDayData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosDayDatas* Arena::CreateMaybeMessage< ::stock_api::CybosDayDatas >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosDayDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosSubjectTickData* Arena::CreateMaybeMessage< ::stock_api::CybosSubjectTickData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosSubjectTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosTickData* Arena::CreateMaybeMessage< ::stock_api::CybosTickData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosBidAskTickData* Arena::CreateMaybeMessage< ::stock_api::CybosBidAskTickData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosBidAskTickData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
