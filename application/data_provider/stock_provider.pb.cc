// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_provider.proto

#include "stock_provider.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stock_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CybosDayData_stock_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stock_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderMsg_stock_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stock_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Report_stock_5fprovider_2eproto;
namespace stock_api {
class StockCodeQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StockCodeQuery> _instance;
} _StockCodeQuery_default_instance_;
class CodeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CodeList> _instance;
} _CodeList_default_instance_;
class PricesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prices> _instance;
} _Prices_default_instance_;
class BoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bool> _instance;
} _Bool_default_instance_;
class TodayTopOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TodayTopOption> _instance;
} _TodayTopOption_default_instance_;
class BalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Balance> _instance;
} _Balance_default_instance_;
class StockQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StockQuery> _instance;
} _StockQuery_default_instance_;
class TopListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopList> _instance;
} _TopList_default_instance_;
class SimulationOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationOperation> _instance;
} _SimulationOperation_default_instance_;
class SimulationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationStatus> _instance;
} _SimulationStatus_default_instance_;
class OrderMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderMsg> _instance;
} _OrderMsg_default_instance_;
class TradeMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeMsg> _instance;
} _TradeMsg_default_instance_;
class CybosOrderReturnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosOrderReturn> _instance;
} _CybosOrderReturn_default_instance_;
class ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Report> _instance;
} _Report_default_instance_;
class OrderResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderResult> _instance;
} _OrderResult_default_instance_;
class CybosOrderResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosOrderResult> _instance;
} _CybosOrderResult_default_instance_;
class ListTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListType> _instance;
} _ListType_default_instance_;
class CompanyNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompanyName> _instance;
} _CompanyName_default_instance_;
class PastMinuteQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PastMinuteQuery> _instance;
} _PastMinuteQuery_default_instance_;
class CybosDayDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosDayData> _instance;
} _CybosDayData_default_instance_;
class CybosDayDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosDayDatas> _instance;
} _CybosDayDatas_default_instance_;
class CybosSubjectTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosSubjectTickData> _instance;
} _CybosSubjectTickData_default_instance_;
class CybosTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosTickData> _instance;
} _CybosTickData_default_instance_;
class CybosBidAskTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosBidAskTickData> _instance;
} _CybosBidAskTickData_default_instance_;
class CybosStockAlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CybosStockAlarm> _instance;
} _CybosStockAlarm_default_instance_;
}  // namespace stock_api
static void InitDefaultsscc_info_Balance_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_Balance_default_instance_;
    new (ptr) ::stock_api::Balance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::Balance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Balance_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Balance_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_Bool_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_Bool_default_instance_;
    new (ptr) ::stock_api::Bool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::Bool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bool_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bool_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CodeList_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CodeList_default_instance_;
    new (ptr) ::stock_api::CodeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CodeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodeList_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CodeList_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CompanyName_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CompanyName_default_instance_;
    new (ptr) ::stock_api::CompanyName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CompanyName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompanyName_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompanyName_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CybosBidAskTickData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosBidAskTickData_default_instance_;
    new (ptr) ::stock_api::CybosBidAskTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosBidAskTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosBidAskTickData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosBidAskTickData_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CybosDayData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosDayData_default_instance_;
    new (ptr) ::stock_api::CybosDayData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosDayData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CybosDayData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CybosDayData_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CybosDayDatas_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosDayDatas_default_instance_;
    new (ptr) ::stock_api::CybosDayDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosDayDatas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosDayDatas_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosDayDatas_stock_5fprovider_2eproto}, {
      &scc_info_CybosDayData_stock_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_CybosOrderResult_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosOrderResult_default_instance_;
    new (ptr) ::stock_api::CybosOrderResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosOrderResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CybosOrderResult_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CybosOrderResult_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CybosOrderReturn_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosOrderReturn_default_instance_;
    new (ptr) ::stock_api::CybosOrderReturn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosOrderReturn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CybosOrderReturn_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CybosOrderReturn_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_CybosStockAlarm_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosStockAlarm_default_instance_;
    new (ptr) ::stock_api::CybosStockAlarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosStockAlarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosStockAlarm_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosStockAlarm_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CybosSubjectTickData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosSubjectTickData_default_instance_;
    new (ptr) ::stock_api::CybosSubjectTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosSubjectTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosSubjectTickData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosSubjectTickData_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CybosTickData_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_CybosTickData_default_instance_;
    new (ptr) ::stock_api::CybosTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::CybosTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CybosTickData_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CybosTickData_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ListType_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_ListType_default_instance_;
    new (ptr) ::stock_api::ListType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::ListType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListType_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListType_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_OrderMsg_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_OrderMsg_default_instance_;
    new (ptr) ::stock_api::OrderMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::OrderMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderMsg_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderMsg_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_OrderResult_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_OrderResult_default_instance_;
    new (ptr) ::stock_api::OrderResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::OrderResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderResult_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderResult_stock_5fprovider_2eproto}, {
      &scc_info_Report_stock_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_PastMinuteQuery_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_PastMinuteQuery_default_instance_;
    new (ptr) ::stock_api::PastMinuteQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::PastMinuteQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PastMinuteQuery_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PastMinuteQuery_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Prices_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_Prices_default_instance_;
    new (ptr) ::stock_api::Prices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::Prices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prices_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prices_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_Report_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_Report_default_instance_;
    new (ptr) ::stock_api::Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Report_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Report_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SimulationOperation_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_SimulationOperation_default_instance_;
    new (ptr) ::stock_api::SimulationOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::SimulationOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulationOperation_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimulationOperation_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SimulationStatus_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_SimulationStatus_default_instance_;
    new (ptr) ::stock_api::SimulationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::SimulationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationStatus_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulationStatus_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_StockCodeQuery_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_StockCodeQuery_default_instance_;
    new (ptr) ::stock_api::StockCodeQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::StockCodeQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StockCodeQuery_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StockCodeQuery_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_StockQuery_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_StockQuery_default_instance_;
    new (ptr) ::stock_api::StockQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::StockQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StockQuery_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StockQuery_stock_5fprovider_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_TodayTopOption_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_TodayTopOption_default_instance_;
    new (ptr) ::stock_api::TodayTopOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::TodayTopOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TodayTopOption_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TodayTopOption_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_TopList_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_TopList_default_instance_;
    new (ptr) ::stock_api::TopList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::TopList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopList_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopList_stock_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_TradeMsg_stock_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_api::_TradeMsg_default_instance_;
    new (ptr) ::stock_api::TradeMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_api::TradeMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeMsg_stock_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeMsg_stock_5fprovider_2eproto}, {
      &scc_info_OrderMsg_stock_5fprovider_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stock_5fprovider_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_stock_5fprovider_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stock_5fprovider_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stock_5fprovider_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockCodeQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockCodeQuery, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CodeList, codelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Prices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::Prices, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Bool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::Bool, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::TodayTopOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::TodayTopOption, selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Balance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::Balance, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, from_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, until_datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, codelist_),
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, is_today_data_),
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, is_on_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, start_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationStatus, simulation_on_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationStatus, simulation_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, is_buy_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, percentage_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, method_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, order_num_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, order_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::TradeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::TradeMsg, msg_type_),
  PROTOBUF_FIELD_OFFSET(::stock_api::TradeMsg, order_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, result_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, msg_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, order_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, is_buy_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, last_update_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, flag_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, method_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, hold_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, internal_order_num_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, order_num_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, traded_quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, traded_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderResult, report_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderResult, current_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, flag_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, order_number_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, is_buy_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, total_quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::ListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::ListType, type_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CompanyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CompanyName, company_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, count_of_days_),
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, today_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, start_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, highest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, close_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, amount_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, cum_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, foreigner_hold_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, foreigner_hold_rate_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, institution_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, institution_cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, is_synchronized_bidding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayDatas, day_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, total_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, foreigner_total_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, yesterday_diff_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, start_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, highest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, ask_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, bid_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_amount_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, current_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_sell_volume_by_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_buy_volume_by_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, time_with_sec_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, market_type_exp_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, market_type_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, out_time_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, is_kospi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, ask_prices_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, bid_prices_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, ask_remains_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, bid_remains_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, total_ask_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, total_bid_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, out_time_total_ask_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, out_time_total_bid_remain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, type_category_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, market_category_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, alarm_category_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, title_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stock_api::StockCodeQuery)},
  { 6, -1, sizeof(::stock_api::CodeList)},
  { 12, -1, sizeof(::stock_api::Prices)},
  { 18, -1, sizeof(::stock_api::Bool)},
  { 24, -1, sizeof(::stock_api::TodayTopOption)},
  { 30, -1, sizeof(::stock_api::Balance)},
  { 36, -1, sizeof(::stock_api::StockQuery)},
  { 44, -1, sizeof(::stock_api::TopList)},
  { 52, -1, sizeof(::stock_api::SimulationOperation)},
  { 60, -1, sizeof(::stock_api::SimulationStatus)},
  { 67, -1, sizeof(::stock_api::OrderMsg)},
  { 80, -1, sizeof(::stock_api::TradeMsg)},
  { 87, -1, sizeof(::stock_api::CybosOrderReturn)},
  { 95, -1, sizeof(::stock_api::Report)},
  { 113, -1, sizeof(::stock_api::OrderResult)},
  { 120, -1, sizeof(::stock_api::CybosOrderResult)},
  { 132, -1, sizeof(::stock_api::ListType)},
  { 138, -1, sizeof(::stock_api::CompanyName)},
  { 144, -1, sizeof(::stock_api::PastMinuteQuery)},
  { 152, -1, sizeof(::stock_api::CybosDayData)},
  { 172, -1, sizeof(::stock_api::CybosDayDatas)},
  { 178, -1, sizeof(::stock_api::CybosSubjectTickData)},
  { 192, -1, sizeof(::stock_api::CybosTickData)},
  { 221, -1, sizeof(::stock_api::CybosBidAskTickData)},
  { 238, -1, sizeof(::stock_api::CybosStockAlarm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockCodeQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CodeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Prices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Bool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_TodayTopOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Balance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_TopList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_SimulationOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_SimulationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_OrderMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_TradeMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosOrderReturn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_OrderResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosOrderResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_ListType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CompanyName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_PastMinuteQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosDayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosDayDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosSubjectTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosBidAskTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosStockAlarm_default_instance_),
};

const char descriptor_table_protodef_stock_5fprovider_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024stock_provider.proto\022\tstock_api\032\037googl"
  "e/protobuf/timestamp.proto\032\033google/proto"
  "buf/empty.proto\"\036\n\016StockCodeQuery\022\014\n\004cod"
  "e\030\001 \001(\t\"\034\n\010CodeList\022\020\n\010codelist\030\001 \003(\t\"\027\n"
  "\006Prices\022\r\n\005price\030\001 \003(\005\"\023\n\004Bool\022\013\n\003ret\030\001 "
  "\001(\010\"A\n\016TodayTopOption\022/\n\tselection\030\001 \001(\016"
  "2\034.stock_api.TodayTopSelection\"\032\n\007Balanc"
  "e\022\017\n\007balance\030\001 \001(\005\"\201\001\n\nStockQuery\022\014\n\004cod"
  "e\030\001 \001(\t\0221\n\rfrom_datetime\030\002 \001(\0132\032.google."
  "protobuf.Timestamp\0222\n\016until_datetime\030\003 \001"
  "(\0132\032.google.protobuf.Timestamp\"@\n\007TopLis"
  "t\022\020\n\010codelist\030\001 \003(\t\022\025\n\ris_today_data\030\002 \001"
  "(\010\022\014\n\004date\030\003 \001(\r\"g\n\023SimulationOperation\022"
  "\r\n\005is_on\030\001 \001(\010\0222\n\016start_datetime\030\002 \001(\0132\032"
  ".google.protobuf.Timestamp\022\r\n\005speed\030\003 \001("
  "\002\"C\n\020SimulationStatus\022\025\n\rsimulation_on\030\001"
  " \001(\010\022\030\n\020simulation_speed\030\002 \001(\002\"\302\001\n\010Order"
  "Msg\022\014\n\004code\030\001 \001(\t\022\016\n\006is_buy\030\002 \001(\010\022\r\n\005pri"
  "ce\030\003 \001(\005\022\020\n\010quantity\030\004 \001(\005\022\022\n\npercentage"
  "\030\005 \001(\005\022&\n\006method\030\006 \001(\0162\026.stock_api.Order"
  "Method\022\021\n\torder_num\030\007 \001(\t\022(\n\norder_type\030"
  "\010 \001(\0162\024.stock_api.OrderType\"D\n\010TradeMsg\022"
  "\020\n\010msg_type\030\001 \001(\005\022&\n\torder_msg\030\002 \001(\0132\023.s"
  "tock_api.OrderMsg\"B\n\020CybosOrderReturn\022\016\n"
  "\006result\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\021\n\torder_num\030"
  "\003 \001(\005\"\333\002\n\006Report\022\014\n\004code\030\001 \001(\t\022\024\n\014compan"
  "y_name\030\002 \001(\t\022\016\n\006is_buy\030\003 \001(\010\0228\n\024last_upd"
  "ate_datetime\030\004 \001(\0132\032.google.protobuf.Tim"
  "estamp\022(\n\004flag\030\005 \001(\0162\032.stock_api.OrderSt"
  "atusFlag\022&\n\006method\030\006 \001(\0162\026.stock_api.Ord"
  "erMethod\022\022\n\nhold_price\030\007 \001(\002\022\r\n\005price\030\010 "
  "\001(\005\022\020\n\010quantity\030\t \001(\005\022\032\n\022internal_order_"
  "num\030\n \001(\t\022\021\n\torder_num\030\013 \001(\t\022\027\n\017traded_q"
  "uantity\030\014 \001(\005\022\024\n\014traded_price\030\r \001(\002\"I\n\013O"
  "rderResult\022!\n\006report\030\001 \003(\0132\021.stock_api.R"
  "eport\022\027\n\017current_balance\030\002 \001(\005\"\251\001\n\020Cybos"
  "OrderResult\022(\n\004flag\030\001 \001(\0162\032.stock_api.Or"
  "derStatusFlag\022\014\n\004code\030\002 \001(\t\022\024\n\014order_num"
  "ber\030\003 \001(\t\022\020\n\010quantity\030\004 \001(\005\022\r\n\005price\030\005 \001"
  "(\005\022\016\n\006is_buy\030\006 \001(\010\022\026\n\016total_quantity\030\007 \001"
  "(\005\"\035\n\010ListType\022\021\n\ttype_name\030\001 \001(\t\"#\n\013Com"
  "panyName\022\024\n\014company_name\030\001 \001(\t\"a\n\017PastMi"
  "nuteQuery\022\014\n\004code\030\001 \001(\t\022\025\n\rcount_of_days"
  "\030\002 \001(\r\022)\n\005today\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\"\363\002\n\014CybosDayData\022\014\n\004date\030\001 \001(\r"
  "\022\014\n\004time\030\002 \001(\r\022\023\n\013start_price\030\003 \001(\r\022\025\n\rh"
  "ighest_price\030\004 \001(\r\022\024\n\014lowest_price\030\005 \001(\r"
  "\022\023\n\013close_price\030\006 \001(\r\022\016\n\006volume\030\007 \001(\003\022\016\n"
  "\006amount\030\010 \001(\004\022\027\n\017cum_sell_volume\030\t \001(\004\022\026"
  "\n\016cum_buy_volume\030\n \001(\004\022\035\n\025foreigner_hold"
  "_volume\030\013 \001(\003\022\033\n\023foreigner_hold_rate\030\014 \001"
  "(\002\022\036\n\026institution_buy_volume\030\r \001(\003\022\"\n\032in"
  "stitution_cum_buy_volume\030\016 \001(\003\022\037\n\027is_syn"
  "chronized_bidding\030\017 \001(\010\":\n\rCybosDayDatas"
  "\022)\n\010day_data\030\001 \003(\0132\027.stock_api.CybosDayD"
  "ata\"\340\001\n\024CybosSubjectTickData\022-\n\ttick_dat"
  "e\030\001 \001(\0132\032.google.protobuf.Timestamp\022\014\n\004t"
  "ime\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004code\030\004 \001(\t\022\024\n"
  "\014company_name\030\005 \001(\t\022\023\n\013buy_or_sell\030\006 \001(\010"
  "\022\016\n\006volume\030\007 \001(\004\022\024\n\014total_volume\030\010 \001(\003\022\036"
  "\n\026foreigner_total_volume\030\t \001(\003\"\270\004\n\rCybos"
  "TickData\022-\n\ttick_date\030\001 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\014\n\004code\030\002 \001(\t\022\024\n\014company"
  "_name\030\003 \001(\t\022\026\n\016yesterday_diff\030\004 \001(\005\022\014\n\004t"
  "ime\030\005 \001(\r\022\023\n\013start_price\030\006 \001(\r\022\025\n\rhighes"
  "t_price\030\007 \001(\r\022\024\n\014lowest_price\030\010 \001(\r\022\021\n\ta"
  "sk_price\030\t \001(\r\022\021\n\tbid_price\030\n \001(\r\022\022\n\ncum"
  "_volume\030\013 \001(\004\022\022\n\ncum_amount\030\014 \001(\004\022\025\n\rcur"
  "rent_price\030\r \001(\r\022\023\n\013buy_or_sell\030\016 \001(\010\022 \n"
  "\030cum_sell_volume_by_price\030\017 \001(\004\022\037\n\027cum_b"
  "uy_volume_by_price\030\020 \001(\004\022\016\n\006volume\030\021 \001(\003"
  "\022\025\n\rtime_with_sec\030\022 \001(\r\022\027\n\017market_type_e"
  "xp\030\023 \001(\r\022\023\n\013market_type\030\024 \001(\r\022\027\n\017out_tim"
  "e_volume\030\025 \001(\004\022\027\n\017cum_sell_volume\030\026 \001(\004\022"
  "\026\n\016cum_buy_volume\030\027 \001(\004\022\020\n\010is_kospi\030\030 \001("
  "\010\"\274\002\n\023CybosBidAskTickData\022-\n\ttick_date\030\001"
  " \001(\0132\032.google.protobuf.Timestamp\022\014\n\004code"
  "\030\002 \001(\t\022\014\n\004time\030\003 \001(\r\022\016\n\006volume\030\004 \001(\004\022\022\n\n"
  "ask_prices\030\005 \003(\005\022\022\n\nbid_prices\030\006 \003(\005\022\023\n\013"
  "ask_remains\030\007 \003(\r\022\023\n\013bid_remains\030\010 \003(\r\022\030"
  "\n\020total_ask_remain\030\t \001(\004\022\030\n\020total_bid_re"
  "main\030\n \001(\004\022!\n\031out_time_total_ask_remain\030"
  "\013 \001(\003\022!\n\031out_time_total_bid_remain\030\014 \001(\003"
  "\"\304\001\n\017CybosStockAlarm\022-\n\ttick_date\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\022\014\n\004time\030\002 \001("
  "\r\022\025\n\rtype_category\030\003 \001(\005\022\027\n\017market_categ"
  "ory\030\004 \001(\005\022\014\n\004code\030\005 \001(\t\022\026\n\016alarm_categor"
  "y\030\006 \001(\005\022\r\n\005title\030\007 \001(\t\022\017\n\007content\030\010 \001(\t*"
  "M\n\021TodayTopSelection\022\020\n\014TOP_BY_RATIO\020\000\022\023"
  "\n\017TOP_BY_MOMENTUM\020\001\022\021\n\rTOP_BY_AMOUNT\020\002*\240"
  "\001\n\017OrderStatusFlag\022\022\n\016STATUS_UNKNOWN\020\000\022\025"
  "\n\021STATUS_REGISTERED\020\001\022\022\n\016STATUS_TRADING\020"
  "\002\022\021\n\rSTATUS_TRADED\0201\022\022\n\016STATUS_CONFIRM\0202"
  "\022\021\n\rSTATUS_DENIED\0203\022\024\n\020STATUS_SUBMITTED\020"
  "4*f\n\013OrderMethod\022\021\n\rTRADE_UNKNOWN\020\000\022\025\n\021T"
  "RADE_IMMEDIATELY\020\001\022\031\n\025TRADE_ON_BID_ASK_M"
  "EET\020\002\022\022\n\016TRADE_ON_PRICE\020\003*,\n\tOrderType\022\007"
  "\n\003NEW\020\000\022\n\n\006MODIFY\020\001\022\n\n\006CANCEL\020\002*N\n\014Trade"
  "MsgType\022\013\n\007UNKNOWN\020\000\022\r\n\tORDER_MSG\020\001\022\021\n\rR"
  "EQ_ALL_ORDER\020\002\022\017\n\013GET_BALANCE\020\0032\361\036\n\005Stoc"
  "k\022<\n\010SayHello\022\026.google.protobuf.Empty\032\026."
  "google.protobuf.Empty\"\000\022\?\n\nGetDayData\022\025."
  "stock_api.StockQuery\032\030.stock_api.CybosDa"
  "yDatas\"\000\022B\n\rGetMinuteData\022\025.stock_api.St"
  "ockQuery\032\030.stock_api.CybosDayDatas\"\000\022K\n\022"
  "GetTodayMinuteData\022\031.stock_api.StockCode"
  "Query\032\030.stock_api.CybosDayDatas\"\000\022K\n\021Get"
  "PastMinuteData\022\032.stock_api.PastMinuteQue"
  "ry\032\030.stock_api.CybosDayDatas\"\000\022B\n\021GetSub"
  "scribeCodes\022\026.google.protobuf.Empty\032\023.st"
  "ock_api.CodeList\"\000\022:\n\nGetBalance\022\026.googl"
  "e.protobuf.Empty\032\022.stock_api.Balance\"\000\022@"
  "\n\nOrderStock\022\023.stock_api.OrderMsg\032\033.stoc"
  "k_api.CybosOrderReturn\"\000\022A\n\013ChangeOrder\022"
  "\023.stock_api.OrderMsg\032\033.stock_api.CybosOr"
  "derReturn\"\000\022A\n\013CancelOrder\022\023.stock_api.O"
  "rderMsg\032\033.stock_api.CybosOrderReturn\"\000\022K"
  "\n\024RequestCybosTickData\022\031.stock_api.Stock"
  "CodeQuery\032\026.google.protobuf.Empty\"\000\022I\n\022R"
  "equestCybosBidAsk\022\031.stock_api.StockCodeQ"
  "uery\032\026.google.protobuf.Empty\"\000\022J\n\023Reques"
  "tCybosSubject\022\031.stock_api.StockCodeQuery"
  "\032\026.google.protobuf.Empty\"\000\022E\n\021RequestCyb"
  "osAlarm\022\026.google.protobuf.Empty\032\026.google"
  ".protobuf.Empty\"\000\022@\n\017RequestToTrader\022\023.s"
  "tock_api.TradeMsg\032\026.google.protobuf.Empt"
  "y\"\000\022K\n\027RequestCybosTradeResult\022\026.google."
  "protobuf.Empty\032\026.google.protobuf.Empty\"\000"
  "\022E\n\021ReportOrderResult\022\026.stock_api.OrderR"
  "esult\032\026.google.protobuf.Empty\"\000\0227\n\007IsKos"
  "pi\022\031.stock_api.StockCodeQuery\032\017.stock_ap"
  "i.Bool\"\000\022<\n\nGetViPrice\022\031.stock_api.Stock"
  "CodeQuery\032\021.stock_api.Prices\"\000\022B\n\017Listen"
  "TraderMsg\022\026.google.protobuf.Empty\032\023.stoc"
  "k_api.TradeMsg\"\0000\001\022Q\n\026ListenCybosOrderRe"
  "sult\022\026.google.protobuf.Empty\032\033.stock_api"
  ".CybosOrderResult\"\0000\001\022G\n\021ListenOrderResu"
  "lt\022\026.google.protobuf.Empty\032\026.stock_api.O"
  "rderResult\"\0000\001\022F\n\017SetCurrentStock\022\031.stoc"
  "k_api.StockCodeQuery\032\026.google.protobuf.E"
  "mpty\"\000\022J\n\022SetCurrentDateTime\022\032.google.pr"
  "otobuf.Timestamp\032\026.google.protobuf.Empty"
  "\"\000\022E\n\016GetCompanyName\022\031.stock_api.StockCo"
  "deQuery\032\026.stock_api.CompanyName\"\000\022@\n\017Get"
  "FavoriteList\022\026.google.protobuf.Empty\032\023.s"
  "tock_api.CodeList\"\000\022B\n\013AddFavorite\022\031.sto"
  "ck_api.StockCodeQuery\032\026.google.protobuf."
  "Empty\"\000\022E\n\016RemoveFavorite\022\031.stock_api.St"
  "ockCodeQuery\032\026.google.protobuf.Empty\"\000\022C"
  "\n\017ClearRecentList\022\026.google.protobuf.Empt"
  "y\032\026.google.protobuf.Empty\"\000\022M\n\031GetYester"
  "dayTopAmountList\022\032.google.protobuf.Times"
  "tamp\032\022.stock_api.TopList\"\000\022H\n\027SetTodayAm"
  "ountRatioList\022\023.stock_api.CodeList\032\026.goo"
  "gle.protobuf.Empty\"\000\022K\n\032SetTodayAmountMo"
  "mentumList\022\023.stock_api.CodeList\032\026.google"
  ".protobuf.Empty\"\000\022F\n\025SetTodayAmountTopLi"
  "st\022\023.stock_api.CodeList\032\026.google.protobu"
  "f.Empty\"\000\022I\n\025GetTodayTopAmountList\022\031.sto"
  "ck_api.TodayTopOption\032\023.stock_api.CodeLi"
  "st\"\000\022G\n\026GetTodayNineThirtyList\022\026.google."
  "protobuf.Empty\032\023.stock_api.CodeList\"\000\022@\n"
  "\017GetRecentSearch\022\026.google.protobuf.Empty"
  "\032\023.stock_api.CodeList\"\000\022:\n\tGetViList\022\026.g"
  "oogle.protobuf.Empty\032\023.stock_api.CodeLis"
  "t\"\000\022K\n\022ListenCurrentStock\022\026.google.proto"
  "buf.Empty\032\031.stock_api.StockCodeQuery\"\0000\001"
  "\022D\n\021ListenListChanged\022\026.google.protobuf."
  "Empty\032\023.stock_api.ListType\"\0000\001\022K\n\023Listen"
  "CybosTickData\022\026.google.protobuf.Empty\032\030."
  "stock_api.CybosTickData\"\0000\001\022O\n\021ListenCyb"
  "osBidAsk\022\026.google.protobuf.Empty\032\036.stock"
  "_api.CybosBidAskTickData\"\0000\001\022K\n\021ListenCu"
  "rrentTime\022\026.google.protobuf.Empty\032\032.goog"
  "le.protobuf.Timestamp\"\0000\001\022Q\n\022ListenCybos"
  "Subject\022\026.google.protobuf.Empty\032\037.stock_"
  "api.CybosSubjectTickData\"\0000\001\022J\n\020ListenCy"
  "bosAlarm\022\026.google.protobuf.Empty\032\032.stock"
  "_api.CybosStockAlarm\"\0000\001\022X\n\035ListenSimula"
  "tionStatusChanged\022\026.google.protobuf.Empt"
  "y\032\033.stock_api.SimulationStatus\"\0000\001\022L\n\026Se"
  "tSimulationStockTick\022\030.stock_api.CybosTi"
  "ckData\032\026.google.protobuf.Empty\"\000\022S\n\027SetS"
  "imulationBidAskTick\022\036.stock_api.CybosBid"
  "AskTickData\032\026.google.protobuf.Empty\"\000\022U\n"
  "\030SetSimulationSubjectTick\022\037.stock_api.Cy"
  "bosSubjectTickData\032\026.google.protobuf.Emp"
  "ty\"\000\022N\n\026SetSimulationAlarmTick\022\032.stock_a"
  "pi.CybosStockAlarm\032\026.google.protobuf.Emp"
  "ty\"\000\022W\n\031ListenSimulationOperation\022\026.goog"
  "le.protobuf.Empty\032\036.stock_api.Simulation"
  "Operation\"\0000\001\022D\n\017StartSimulation\022\036.stock"
  "_api.SimulationOperation\032\017.stock_api.Boo"
  "l\"\000\022B\n\016StopSimulation\022\026.google.protobuf."
  "Empty\032\026.google.protobuf.Empty\"\000\022L\n\023SetSi"
  "mulationStatus\022\033.stock_api.SimulationSta"
  "tus\032\026.google.protobuf.Empty\"\000\022L\n\023GetSimu"
  "lationStatus\022\026.google.protobuf.Empty\032\033.s"
  "tock_api.SimulationStatus\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stock_5fprovider_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stock_5fprovider_2eproto_sccs[25] = {
  &scc_info_Balance_stock_5fprovider_2eproto.base,
  &scc_info_Bool_stock_5fprovider_2eproto.base,
  &scc_info_CodeList_stock_5fprovider_2eproto.base,
  &scc_info_CompanyName_stock_5fprovider_2eproto.base,
  &scc_info_CybosBidAskTickData_stock_5fprovider_2eproto.base,
  &scc_info_CybosDayData_stock_5fprovider_2eproto.base,
  &scc_info_CybosDayDatas_stock_5fprovider_2eproto.base,
  &scc_info_CybosOrderResult_stock_5fprovider_2eproto.base,
  &scc_info_CybosOrderReturn_stock_5fprovider_2eproto.base,
  &scc_info_CybosStockAlarm_stock_5fprovider_2eproto.base,
  &scc_info_CybosSubjectTickData_stock_5fprovider_2eproto.base,
  &scc_info_CybosTickData_stock_5fprovider_2eproto.base,
  &scc_info_ListType_stock_5fprovider_2eproto.base,
  &scc_info_OrderMsg_stock_5fprovider_2eproto.base,
  &scc_info_OrderResult_stock_5fprovider_2eproto.base,
  &scc_info_PastMinuteQuery_stock_5fprovider_2eproto.base,
  &scc_info_Prices_stock_5fprovider_2eproto.base,
  &scc_info_Report_stock_5fprovider_2eproto.base,
  &scc_info_SimulationOperation_stock_5fprovider_2eproto.base,
  &scc_info_SimulationStatus_stock_5fprovider_2eproto.base,
  &scc_info_StockCodeQuery_stock_5fprovider_2eproto.base,
  &scc_info_StockQuery_stock_5fprovider_2eproto.base,
  &scc_info_TodayTopOption_stock_5fprovider_2eproto.base,
  &scc_info_TopList_stock_5fprovider_2eproto.base,
  &scc_info_TradeMsg_stock_5fprovider_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stock_5fprovider_2eproto_once;
static bool descriptor_table_stock_5fprovider_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stock_5fprovider_2eproto = {
  &descriptor_table_stock_5fprovider_2eproto_initialized, descriptor_table_protodef_stock_5fprovider_2eproto, "stock_provider.proto", 7955,
  &descriptor_table_stock_5fprovider_2eproto_once, descriptor_table_stock_5fprovider_2eproto_sccs, descriptor_table_stock_5fprovider_2eproto_deps, 25, 2,
  schemas, file_default_instances, TableStruct_stock_5fprovider_2eproto::offsets,
  file_level_metadata_stock_5fprovider_2eproto, 25, file_level_enum_descriptors_stock_5fprovider_2eproto, file_level_service_descriptors_stock_5fprovider_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stock_5fprovider_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stock_5fprovider_2eproto), true);
namespace stock_api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TodayTopSelection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[0];
}
bool TodayTopSelection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[1];
}
bool OrderStatusFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[2];
}
bool OrderMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[3];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[4];
}
bool TradeMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StockCodeQuery::InitAsDefaultInstance() {
}
class StockCodeQuery::_Internal {
 public:
};

StockCodeQuery::StockCodeQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.StockCodeQuery)
}
StockCodeQuery::StockCodeQuery(const StockCodeQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.StockCodeQuery)
}

void StockCodeQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StockCodeQuery_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StockCodeQuery::~StockCodeQuery() {
  // @@protoc_insertion_point(destructor:stock_api.StockCodeQuery)
  SharedDtor();
}

void StockCodeQuery::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StockCodeQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StockCodeQuery& StockCodeQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StockCodeQuery_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void StockCodeQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockCodeQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StockCodeQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockCodeQuery.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockCodeQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockCodeQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockCodeQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockCodeQuery)
  return target;
}

size_t StockCodeQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockCodeQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockCodeQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.StockCodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const StockCodeQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockCodeQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.StockCodeQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.StockCodeQuery)
    MergeFrom(*source);
  }
}

void StockCodeQuery::MergeFrom(const StockCodeQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockCodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void StockCodeQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.StockCodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockCodeQuery::CopyFrom(const StockCodeQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockCodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCodeQuery::IsInitialized() const {
  return true;
}

void StockCodeQuery::InternalSwap(StockCodeQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StockCodeQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CodeList::InitAsDefaultInstance() {
}
class CodeList::_Internal {
 public:
};

CodeList::CodeList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CodeList)
}
CodeList::CodeList(const CodeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      codelist_(from.codelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CodeList)
}

void CodeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CodeList_stock_5fprovider_2eproto.base);
}

CodeList::~CodeList() {
  // @@protoc_insertion_point(destructor:stock_api.CodeList)
  SharedDtor();
}

void CodeList::SharedDtor() {
}

void CodeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CodeList& CodeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CodeList_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codelist_.Clear();
  _internal_metadata_.Clear();
}

const char* CodeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string codelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_codelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CodeList.codelist"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CodeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codelist = 1;
  for (int i = 0, n = this->_internal_codelist_size(); i < n; i++) {
    const auto& s = this->_internal_codelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CodeList.codelist");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CodeList)
  return target;
}

size_t CodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CodeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string codelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(codelist_.size());
  for (int i = 0, n = codelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      codelist_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CodeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CodeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CodeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CodeList)
    MergeFrom(*source);
  }
}

void CodeList::MergeFrom(const CodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CodeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codelist_.MergeFrom(from.codelist_);
}

void CodeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeList::CopyFrom(const CodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeList::IsInitialized() const {
  return true;
}

void CodeList::InternalSwap(CodeList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  codelist_.InternalSwap(&other->codelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prices::InitAsDefaultInstance() {
}
class Prices::_Internal {
 public:
};

Prices::Prices()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.Prices)
}
Prices::Prices(const Prices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      price_(from.price_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.Prices)
}

void Prices::SharedCtor() {
}

Prices::~Prices() {
  // @@protoc_insertion_point(destructor:stock_api.Prices)
  SharedDtor();
}

void Prices::SharedDtor() {
}

void Prices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prices& Prices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prices_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void Prices::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Prices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_.Clear();
  _internal_metadata_.Clear();
}

const char* Prices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_price(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_price(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Prices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 price = 1;
  {
    int byte_size = _price_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_price(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Prices)
  return target;
}

size_t Prices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Prices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 price = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->price_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _price_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.Prices)
  GOOGLE_DCHECK_NE(&from, this);
  const Prices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.Prices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.Prices)
    MergeFrom(*source);
  }
}

void Prices::MergeFrom(const Prices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Prices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_.MergeFrom(from.price_);
}

void Prices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.Prices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prices::CopyFrom(const Prices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Prices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prices::IsInitialized() const {
  return true;
}

void Prices::InternalSwap(Prices* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  price_.InternalSwap(&other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bool::InitAsDefaultInstance() {
}
class Bool::_Internal {
 public:
};

Bool::Bool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.Bool)
}
Bool::Bool(const Bool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:stock_api.Bool)
}

void Bool::SharedCtor() {
  ret_ = false;
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:stock_api.Bool)
  SharedDtor();
}

void Bool::SharedDtor() {
}

void Bool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bool& Bool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bool_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Bool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = false;
  _internal_metadata_.Clear();
}

const char* Bool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Bool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Bool)
  return target;
}

size_t Bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Bool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->ret() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  const Bool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.Bool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.Bool)
    MergeFrom(*source);
  }
}

void Bool::MergeFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Bool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bool::CopyFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {
  return true;
}

void Bool::InternalSwap(Bool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TodayTopOption::InitAsDefaultInstance() {
}
class TodayTopOption::_Internal {
 public:
};

TodayTopOption::TodayTopOption()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.TodayTopOption)
}
TodayTopOption::TodayTopOption(const TodayTopOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selection_ = from.selection_;
  // @@protoc_insertion_point(copy_constructor:stock_api.TodayTopOption)
}

void TodayTopOption::SharedCtor() {
  selection_ = 0;
}

TodayTopOption::~TodayTopOption() {
  // @@protoc_insertion_point(destructor:stock_api.TodayTopOption)
  SharedDtor();
}

void TodayTopOption::SharedDtor() {
}

void TodayTopOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TodayTopOption& TodayTopOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TodayTopOption_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void TodayTopOption::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.TodayTopOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_ = 0;
  _internal_metadata_.Clear();
}

const char* TodayTopOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .stock_api.TodayTopSelection selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_selection(static_cast<::stock_api::TodayTopSelection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TodayTopOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.TodayTopOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stock_api.TodayTopSelection selection = 1;
  if (this->selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.TodayTopOption)
  return target;
}

size_t TodayTopOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.TodayTopOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stock_api.TodayTopSelection selection = 1;
  if (this->selection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TodayTopOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.TodayTopOption)
  GOOGLE_DCHECK_NE(&from, this);
  const TodayTopOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TodayTopOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.TodayTopOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.TodayTopOption)
    MergeFrom(*source);
  }
}

void TodayTopOption::MergeFrom(const TodayTopOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.TodayTopOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.selection() != 0) {
    _internal_set_selection(from._internal_selection());
  }
}

void TodayTopOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.TodayTopOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayTopOption::CopyFrom(const TodayTopOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.TodayTopOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayTopOption::IsInitialized() const {
  return true;
}

void TodayTopOption::InternalSwap(TodayTopOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selection_, other->selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TodayTopOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Balance::InitAsDefaultInstance() {
}
class Balance::_Internal {
 public:
};

Balance::Balance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.Balance)
}
Balance::Balance(const Balance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:stock_api.Balance)
}

void Balance::SharedCtor() {
  balance_ = 0;
}

Balance::~Balance() {
  // @@protoc_insertion_point(destructor:stock_api.Balance)
  SharedDtor();
}

void Balance::SharedDtor() {
}

void Balance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Balance& Balance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Balance_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Balance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_ = 0;
  _internal_metadata_.Clear();
}

const char* Balance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Balance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Balance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 balance = 1;
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Balance)
  return target;
}

size_t Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Balance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 balance = 1;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Balance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  const Balance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Balance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.Balance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.Balance)
    MergeFrom(*source);
  }
}

void Balance::MergeFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void Balance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balance::CopyFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance::IsInitialized() const {
  return true;
}

void Balance::InternalSwap(Balance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StockQuery::InitAsDefaultInstance() {
  ::stock_api::_StockQuery_default_instance_._instance.get_mutable()->from_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::stock_api::_StockQuery_default_instance_._instance.get_mutable()->until_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StockQuery::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime(const StockQuery* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime(const StockQuery* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StockQuery::_Internal::from_datetime(const StockQuery* msg) {
  return *msg->from_datetime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StockQuery::_Internal::until_datetime(const StockQuery* msg) {
  return *msg->until_datetime_;
}
void StockQuery::clear_from_datetime() {
  if (GetArenaNoVirtual() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
}
void StockQuery::clear_until_datetime() {
  if (GetArenaNoVirtual() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
}
StockQuery::StockQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.StockQuery)
}
StockQuery::StockQuery(const StockQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_from_datetime()) {
    from_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.from_datetime_);
  } else {
    from_datetime_ = nullptr;
  }
  if (from._internal_has_until_datetime()) {
    until_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.until_datetime_);
  } else {
    until_datetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.StockQuery)
}

void StockQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StockQuery_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&until_datetime_) -
      reinterpret_cast<char*>(&from_datetime_)) + sizeof(until_datetime_));
}

StockQuery::~StockQuery() {
  // @@protoc_insertion_point(destructor:stock_api.StockQuery)
  SharedDtor();
}

void StockQuery::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_datetime_;
  if (this != internal_default_instance()) delete until_datetime_;
}

void StockQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StockQuery& StockQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StockQuery_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void StockQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StockQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockQuery.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from_datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp until_datetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_until_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->has_from_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->has_until_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::until_datetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockQuery)
  return target;
}

size_t StockQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->has_from_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_datetime_);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->has_until_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *until_datetime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.StockQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.StockQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.StockQuery)
    MergeFrom(*source);
  }
}

void StockQuery::MergeFrom(const StockQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_from_datetime()) {
    _internal_mutable_from_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_from_datetime());
  }
  if (from.has_until_datetime()) {
    _internal_mutable_until_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_until_datetime());
  }
}

void StockQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.StockQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQuery::CopyFrom(const StockQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQuery::IsInitialized() const {
  return true;
}

void StockQuery::InternalSwap(StockQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_datetime_, other->from_datetime_);
  swap(until_datetime_, other->until_datetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopList::InitAsDefaultInstance() {
}
class TopList::_Internal {
 public:
};

TopList::TopList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.TopList)
}
TopList::TopList(const TopList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      codelist_(from.codelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_today_data_, &from.is_today_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&is_today_data_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:stock_api.TopList)
}

void TopList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopList_stock_5fprovider_2eproto.base);
  ::memset(&is_today_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&is_today_data_)) + sizeof(date_));
}

TopList::~TopList() {
  // @@protoc_insertion_point(destructor:stock_api.TopList)
  SharedDtor();
}

void TopList::SharedDtor() {
}

void TopList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopList& TopList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopList_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void TopList::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.TopList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codelist_.Clear();
  ::memset(&is_today_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&is_today_data_)) + sizeof(date_));
  _internal_metadata_.Clear();
}

const char* TopList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string codelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_codelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.TopList.codelist"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_today_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_today_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.TopList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codelist = 1;
  for (int i = 0, n = this->_internal_codelist_size(); i < n; i++) {
    const auto& s = this->_internal_codelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.TopList.codelist");
    target = stream->WriteString(1, s, target);
  }

  // bool is_today_data = 2;
  if (this->is_today_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_today_data(), target);
  }

  // uint32 date = 3;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.TopList)
  return target;
}

size_t TopList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.TopList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string codelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(codelist_.size());
  for (int i = 0, n = codelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      codelist_.Get(i));
  }

  // bool is_today_data = 2;
  if (this->is_today_data() != 0) {
    total_size += 1 + 1;
  }

  // uint32 date = 3;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.TopList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.TopList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.TopList)
    MergeFrom(*source);
  }
}

void TopList::MergeFrom(const TopList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.TopList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codelist_.MergeFrom(from.codelist_);
  if (from.is_today_data() != 0) {
    _internal_set_is_today_data(from._internal_is_today_data());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
}

void TopList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.TopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopList::CopyFrom(const TopList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.TopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopList::IsInitialized() const {
  return true;
}

void TopList::InternalSwap(TopList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  codelist_.InternalSwap(&other->codelist_);
  swap(is_today_data_, other->is_today_data_);
  swap(date_, other->date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulationOperation::InitAsDefaultInstance() {
  ::stock_api::_SimulationOperation_default_instance_._instance.get_mutable()->start_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SimulationOperation::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_datetime(const SimulationOperation* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SimulationOperation::_Internal::start_datetime(const SimulationOperation* msg) {
  return *msg->start_datetime_;
}
void SimulationOperation::clear_start_datetime() {
  if (GetArenaNoVirtual() == nullptr && start_datetime_ != nullptr) {
    delete start_datetime_;
  }
  start_datetime_ = nullptr;
}
SimulationOperation::SimulationOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.SimulationOperation)
}
SimulationOperation::SimulationOperation(const SimulationOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_start_datetime()) {
    start_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_datetime_);
  } else {
    start_datetime_ = nullptr;
  }
  ::memcpy(&is_on_, &from.is_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&is_on_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:stock_api.SimulationOperation)
}

void SimulationOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationOperation_stock_5fprovider_2eproto.base);
  ::memset(&start_datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&start_datetime_)) + sizeof(speed_));
}

SimulationOperation::~SimulationOperation() {
  // @@protoc_insertion_point(destructor:stock_api.SimulationOperation)
  SharedDtor();
}

void SimulationOperation::SharedDtor() {
  if (this != internal_default_instance()) delete start_datetime_;
}

void SimulationOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationOperation& SimulationOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationOperation_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void SimulationOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.SimulationOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_datetime_ != nullptr) {
    delete start_datetime_;
  }
  start_datetime_ = nullptr;
  ::memset(&is_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&is_on_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

const char* SimulationOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.SimulationOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_on = 1;
  if (this->is_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_on(), target);
  }

  // .google.protobuf.Timestamp start_datetime = 2;
  if (this->has_start_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_datetime(this), target, stream);
  }

  // float speed = 3;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.SimulationOperation)
  return target;
}

size_t SimulationOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.SimulationOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_datetime = 2;
  if (this->has_start_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_datetime_);
  }

  // bool is_on = 1;
  if (this->is_on() != 0) {
    total_size += 1 + 1;
  }

  // float speed = 3;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.SimulationOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.SimulationOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.SimulationOperation)
    MergeFrom(*source);
  }
}

void SimulationOperation::MergeFrom(const SimulationOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.SimulationOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_datetime()) {
    _internal_mutable_start_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_datetime());
  }
  if (from.is_on() != 0) {
    _internal_set_is_on(from._internal_is_on());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
}

void SimulationOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.SimulationOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationOperation::CopyFrom(const SimulationOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.SimulationOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationOperation::IsInitialized() const {
  return true;
}

void SimulationOperation::InternalSwap(SimulationOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_datetime_, other->start_datetime_);
  swap(is_on_, other->is_on_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulationStatus::InitAsDefaultInstance() {
}
class SimulationStatus::_Internal {
 public:
};

SimulationStatus::SimulationStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.SimulationStatus)
}
SimulationStatus::SimulationStatus(const SimulationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&simulation_on_, &from.simulation_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&simulation_speed_) -
    reinterpret_cast<char*>(&simulation_on_)) + sizeof(simulation_speed_));
  // @@protoc_insertion_point(copy_constructor:stock_api.SimulationStatus)
}

void SimulationStatus::SharedCtor() {
  ::memset(&simulation_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simulation_speed_) -
      reinterpret_cast<char*>(&simulation_on_)) + sizeof(simulation_speed_));
}

SimulationStatus::~SimulationStatus() {
  // @@protoc_insertion_point(destructor:stock_api.SimulationStatus)
  SharedDtor();
}

void SimulationStatus::SharedDtor() {
}

void SimulationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationStatus& SimulationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationStatus_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void SimulationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.SimulationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&simulation_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simulation_speed_) -
      reinterpret_cast<char*>(&simulation_on_)) + sizeof(simulation_speed_));
  _internal_metadata_.Clear();
}

const char* SimulationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool simulation_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          simulation_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float simulation_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          simulation_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.SimulationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool simulation_on = 1;
  if (this->simulation_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_simulation_on(), target);
  }

  // float simulation_speed = 2;
  if (!(this->simulation_speed() <= 0 && this->simulation_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_simulation_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.SimulationStatus)
  return target;
}

size_t SimulationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.SimulationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool simulation_on = 1;
  if (this->simulation_on() != 0) {
    total_size += 1 + 1;
  }

  // float simulation_speed = 2;
  if (!(this->simulation_speed() <= 0 && this->simulation_speed() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.SimulationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.SimulationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.SimulationStatus)
    MergeFrom(*source);
  }
}

void SimulationStatus::MergeFrom(const SimulationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.SimulationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.simulation_on() != 0) {
    _internal_set_simulation_on(from._internal_simulation_on());
  }
  if (!(from.simulation_speed() <= 0 && from.simulation_speed() >= 0)) {
    _internal_set_simulation_speed(from._internal_simulation_speed());
  }
}

void SimulationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.SimulationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationStatus::CopyFrom(const SimulationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.SimulationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationStatus::IsInitialized() const {
  return true;
}

void SimulationStatus::InternalSwap(SimulationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(simulation_on_, other->simulation_on_);
  swap(simulation_speed_, other->simulation_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderMsg::InitAsDefaultInstance() {
}
class OrderMsg::_Internal {
 public:
};

OrderMsg::OrderMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.OrderMsg)
}
OrderMsg::OrderMsg(const OrderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_num().empty()) {
    order_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_num_);
  }
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_type_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(order_type_));
  // @@protoc_insertion_point(copy_constructor:stock_api.OrderMsg)
}

void OrderMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderMsg_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_type_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(order_type_));
}

OrderMsg::~OrderMsg() {
  // @@protoc_insertion_point(destructor:stock_api.OrderMsg)
  SharedDtor();
}

void OrderMsg::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderMsg& OrderMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderMsg_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void OrderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.OrderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_type_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(order_type_));
  _internal_metadata_.Clear();
}

const char* OrderMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.OrderMsg.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 percentage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stock_api.OrderMethod method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::stock_api::OrderMethod>(val));
        } else goto handle_unusual;
        continue;
      // string order_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_order_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.OrderMsg.order_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stock_api.OrderType order_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::stock_api::OrderType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.OrderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.OrderMsg.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_buy(), target);
  }

  // int32 price = 3;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_price(), target);
  }

  // int32 quantity = 4;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_quantity(), target);
  }

  // int32 percentage = 5;
  if (this->percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_percentage(), target);
  }

  // .stock_api.OrderMethod method = 6;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_method(), target);
  }

  // string order_num = 7;
  if (this->order_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_num().data(), static_cast<int>(this->_internal_order_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.OrderMsg.order_num");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_order_num(), target);
  }

  // .stock_api.OrderType order_type = 8;
  if (this->order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_order_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.OrderMsg)
  return target;
}

size_t OrderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.OrderMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string order_num = 7;
  if (this->order_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_num());
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // int32 price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  // int32 percentage = 5;
  if (this->percentage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_percentage());
  }

  // .stock_api.OrderMethod method = 6;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  // .stock_api.OrderType order_type = 8;
  if (this->order_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.OrderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.OrderMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.OrderMsg)
    MergeFrom(*source);
  }
}

void OrderMsg::MergeFrom(const OrderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.OrderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.order_num().size() > 0) {

    order_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_num_);
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.percentage() != 0) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.order_type() != 0) {
    _internal_set_order_type(from._internal_order_type());
  }
}

void OrderMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.OrderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMsg::CopyFrom(const OrderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.OrderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMsg::IsInitialized() const {
  return true;
}

void OrderMsg::InternalSwap(OrderMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_num_.Swap(&other->order_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_buy_, other->is_buy_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(percentage_, other->percentage_);
  swap(method_, other->method_);
  swap(order_type_, other->order_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeMsg::InitAsDefaultInstance() {
  ::stock_api::_TradeMsg_default_instance_._instance.get_mutable()->order_msg_ = const_cast< ::stock_api::OrderMsg*>(
      ::stock_api::OrderMsg::internal_default_instance());
}
class TradeMsg::_Internal {
 public:
  static const ::stock_api::OrderMsg& order_msg(const TradeMsg* msg);
};

const ::stock_api::OrderMsg&
TradeMsg::_Internal::order_msg(const TradeMsg* msg) {
  return *msg->order_msg_;
}
TradeMsg::TradeMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.TradeMsg)
}
TradeMsg::TradeMsg(const TradeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order_msg()) {
    order_msg_ = new ::stock_api::OrderMsg(*from.order_msg_);
  } else {
    order_msg_ = nullptr;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:stock_api.TradeMsg)
}

void TradeMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeMsg_stock_5fprovider_2eproto.base);
  ::memset(&order_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&order_msg_)) + sizeof(msg_type_));
}

TradeMsg::~TradeMsg() {
  // @@protoc_insertion_point(destructor:stock_api.TradeMsg)
  SharedDtor();
}

void TradeMsg::SharedDtor() {
  if (this != internal_default_instance()) delete order_msg_;
}

void TradeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeMsg& TradeMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeMsg_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void TradeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.TradeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_msg_ != nullptr) {
    delete order_msg_;
  }
  order_msg_ = nullptr;
  msg_type_ = 0;
  _internal_metadata_.Clear();
}

const char* TradeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stock_api.OrderMsg order_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.TradeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // .stock_api.OrderMsg order_msg = 2;
  if (this->has_order_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::order_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.TradeMsg)
  return target;
}

size_t TradeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.TradeMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stock_api.OrderMsg order_msg = 2;
  if (this->has_order_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_msg_);
  }

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.TradeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.TradeMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.TradeMsg)
    MergeFrom(*source);
  }
}

void TradeMsg::MergeFrom(const TradeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.TradeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order_msg()) {
    _internal_mutable_order_msg()->::stock_api::OrderMsg::MergeFrom(from._internal_order_msg());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
}

void TradeMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.TradeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeMsg::CopyFrom(const TradeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.TradeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeMsg::IsInitialized() const {
  return true;
}

void TradeMsg::InternalSwap(TradeMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_msg_, other->order_msg_);
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosOrderReturn::InitAsDefaultInstance() {
}
class CybosOrderReturn::_Internal {
 public:
};

CybosOrderReturn::CybosOrderReturn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosOrderReturn)
}
CybosOrderReturn::CybosOrderReturn(const CybosOrderReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_num_) -
    reinterpret_cast<char*>(&result_)) + sizeof(order_num_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosOrderReturn)
}

void CybosOrderReturn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosOrderReturn_stock_5fprovider_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_num_) -
      reinterpret_cast<char*>(&result_)) + sizeof(order_num_));
}

CybosOrderReturn::~CybosOrderReturn() {
  // @@protoc_insertion_point(destructor:stock_api.CybosOrderReturn)
  SharedDtor();
}

void CybosOrderReturn::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CybosOrderReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosOrderReturn& CybosOrderReturn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosOrderReturn_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosOrderReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosOrderReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_num_) -
      reinterpret_cast<char*>(&result_)) + sizeof(order_num_));
  _internal_metadata_.Clear();
}

const char* CybosOrderReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosOrderReturn.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 order_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          order_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosOrderReturn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosOrderReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosOrderReturn.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 order_num = 3;
  if (this->order_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosOrderReturn)
  return target;
}

size_t CybosOrderReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosOrderReturn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 order_num = 3;
  if (this->order_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosOrderReturn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosOrderReturn)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosOrderReturn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosOrderReturn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosOrderReturn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosOrderReturn)
    MergeFrom(*source);
  }
}

void CybosOrderReturn::MergeFrom(const CybosOrderReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosOrderReturn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.order_num() != 0) {
    _internal_set_order_num(from._internal_order_num());
  }
}

void CybosOrderReturn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosOrderReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosOrderReturn::CopyFrom(const CybosOrderReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosOrderReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosOrderReturn::IsInitialized() const {
  return true;
}

void CybosOrderReturn::InternalSwap(CybosOrderReturn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(order_num_, other->order_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosOrderReturn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Report::InitAsDefaultInstance() {
  ::stock_api::_Report_default_instance_._instance.get_mutable()->last_update_datetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Report::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_update_datetime(const Report* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Report::_Internal::last_update_datetime(const Report* msg) {
  return *msg->last_update_datetime_;
}
void Report::clear_last_update_datetime() {
  if (GetArenaNoVirtual() == nullptr && last_update_datetime_ != nullptr) {
    delete last_update_datetime_;
  }
  last_update_datetime_ = nullptr;
}
Report::Report()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.Report)
}
Report::Report(const Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  internal_order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_internal_order_num().empty()) {
    internal_order_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.internal_order_num_);
  }
  order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_num().empty()) {
    order_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_num_);
  }
  if (from._internal_has_last_update_datetime()) {
    last_update_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_update_datetime_);
  } else {
    last_update_datetime_ = nullptr;
  }
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&traded_price_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(traded_price_));
  // @@protoc_insertion_point(copy_constructor:stock_api.Report)
}

void Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Report_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_update_datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traded_price_) -
      reinterpret_cast<char*>(&last_update_datetime_)) + sizeof(traded_price_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:stock_api.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_order_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_update_datetime_;
}

void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report& Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Report_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_order_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && last_update_datetime_ != nullptr) {
    delete last_update_datetime_;
  }
  last_update_datetime_ = nullptr;
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traded_price_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(traded_price_));
  _internal_metadata_.Clear();
}

const char* Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_update_datetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_update_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stock_api.OrderStatusFlag flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::stock_api::OrderStatusFlag>(val));
        } else goto handle_unusual;
        continue;
      // .stock_api.OrderMethod method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::stock_api::OrderMethod>(val));
        } else goto handle_unusual;
        continue;
      // float hold_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          hold_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string internal_order_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_internal_order_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.internal_order_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_order_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.order_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 traded_quantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          traded_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float traded_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          traded_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string company_name = 2;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.company_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_name(), target);
  }

  // bool is_buy = 3;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_buy(), target);
  }

  // .google.protobuf.Timestamp last_update_datetime = 4;
  if (this->has_last_update_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_update_datetime(this), target, stream);
  }

  // .stock_api.OrderStatusFlag flag = 5;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_flag(), target);
  }

  // .stock_api.OrderMethod method = 6;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_method(), target);
  }

  // float hold_price = 7;
  if (!(this->hold_price() <= 0 && this->hold_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hold_price(), target);
  }

  // int32 price = 8;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_price(), target);
  }

  // int32 quantity = 9;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_quantity(), target);
  }

  // string internal_order_num = 10;
  if (this->internal_order_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_internal_order_num().data(), static_cast<int>(this->_internal_internal_order_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.internal_order_num");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_internal_order_num(), target);
  }

  // string order_num = 11;
  if (this->order_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_num().data(), static_cast<int>(this->_internal_order_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.order_num");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_order_num(), target);
  }

  // int32 traded_quantity = 12;
  if (this->traded_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_traded_quantity(), target);
  }

  // float traded_price = 13;
  if (!(this->traded_price() <= 0 && this->traded_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_traded_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 2;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string internal_order_num = 10;
  if (this->internal_order_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_internal_order_num());
  }

  // string order_num = 11;
  if (this->order_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_num());
  }

  // .google.protobuf.Timestamp last_update_datetime = 4;
  if (this->has_last_update_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_update_datetime_);
  }

  // bool is_buy = 3;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // .stock_api.OrderStatusFlag flag = 5;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // .stock_api.OrderMethod method = 6;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  // float hold_price = 7;
  if (!(this->hold_price() <= 0 && this->hold_price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 price = 8;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 quantity = 9;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  // int32 traded_quantity = 12;
  if (this->traded_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_traded_quantity());
  }

  // float traded_price = 13;
  if (!(this->traded_price() <= 0 && this->traded_price() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.Report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.Report)
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.internal_order_num().size() > 0) {

    internal_order_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.internal_order_num_);
  }
  if (from.order_num().size() > 0) {

    order_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_num_);
  }
  if (from.has_last_update_datetime()) {
    _internal_mutable_last_update_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_update_datetime());
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
  if (!(from.hold_price() <= 0 && from.hold_price() >= 0)) {
    _internal_set_hold_price(from._internal_hold_price());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.traded_quantity() != 0) {
    _internal_set_traded_quantity(from._internal_traded_quantity());
  }
  if (!(from.traded_price() <= 0 && from.traded_price() >= 0)) {
    _internal_set_traded_price(from._internal_traded_price());
  }
}

void Report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::InternalSwap(Report* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internal_order_num_.Swap(&other->internal_order_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_num_.Swap(&other->order_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_update_datetime_, other->last_update_datetime_);
  swap(is_buy_, other->is_buy_);
  swap(flag_, other->flag_);
  swap(method_, other->method_);
  swap(hold_price_, other->hold_price_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(traded_quantity_, other->traded_quantity_);
  swap(traded_price_, other->traded_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderResult::InitAsDefaultInstance() {
}
class OrderResult::_Internal {
 public:
};

OrderResult::OrderResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.OrderResult)
}
OrderResult::OrderResult(const OrderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      report_(from.report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_balance_ = from.current_balance_;
  // @@protoc_insertion_point(copy_constructor:stock_api.OrderResult)
}

void OrderResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderResult_stock_5fprovider_2eproto.base);
  current_balance_ = 0;
}

OrderResult::~OrderResult() {
  // @@protoc_insertion_point(destructor:stock_api.OrderResult)
  SharedDtor();
}

void OrderResult::SharedDtor() {
}

void OrderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderResult& OrderResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderResult_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void OrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.OrderResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_.Clear();
  current_balance_ = 0;
  _internal_metadata_.Clear();
}

const char* OrderResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .stock_api.Report report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 current_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.OrderResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .stock_api.Report report = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_report(i), target, stream);
  }

  // int32 current_balance = 2;
  if (this->current_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.OrderResult)
  return target;
}

size_t OrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.OrderResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.Report report = 1;
  total_size += 1UL * this->_internal_report_size();
  for (const auto& msg : this->report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 current_balance = 2;
  if (this->current_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.OrderResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.OrderResult)
    MergeFrom(*source);
  }
}

void OrderResult::MergeFrom(const OrderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  report_.MergeFrom(from.report_);
  if (from.current_balance() != 0) {
    _internal_set_current_balance(from._internal_current_balance());
  }
}

void OrderResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderResult::CopyFrom(const OrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderResult::IsInitialized() const {
  return true;
}

void OrderResult::InternalSwap(OrderResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  report_.InternalSwap(&other->report_);
  swap(current_balance_, other->current_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosOrderResult::InitAsDefaultInstance() {
}
class CybosOrderResult::_Internal {
 public:
};

CybosOrderResult::CybosOrderResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosOrderResult)
}
CybosOrderResult::CybosOrderResult(const CybosOrderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_number().empty()) {
    order_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_number_);
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_quantity_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(total_quantity_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosOrderResult)
}

void CybosOrderResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosOrderResult_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_quantity_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(total_quantity_));
}

CybosOrderResult::~CybosOrderResult() {
  // @@protoc_insertion_point(destructor:stock_api.CybosOrderResult)
  SharedDtor();
}

void CybosOrderResult::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CybosOrderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosOrderResult& CybosOrderResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosOrderResult_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosOrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosOrderResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_quantity_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(total_quantity_));
  _internal_metadata_.Clear();
}

const char* CybosOrderResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .stock_api.OrderStatusFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::stock_api::OrderStatusFlag>(val));
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosOrderResult.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_order_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosOrderResult.order_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosOrderResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosOrderResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stock_api.OrderStatusFlag flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosOrderResult.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string order_number = 3;
  if (this->order_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_number().data(), static_cast<int>(this->_internal_order_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosOrderResult.order_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_order_number(), target);
  }

  // int32 quantity = 4;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_quantity(), target);
  }

  // int32 price = 5;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_price(), target);
  }

  // bool is_buy = 6;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_buy(), target);
  }

  // int32 total_quantity = 7;
  if (this->total_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosOrderResult)
  return target;
}

size_t CybosOrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosOrderResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string order_number = 3;
  if (this->order_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_number());
  }

  // .stock_api.OrderStatusFlag flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // int32 quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  // int32 price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // bool is_buy = 6;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_quantity = 7;
  if (this->total_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosOrderResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosOrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosOrderResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosOrderResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosOrderResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosOrderResult)
    MergeFrom(*source);
  }
}

void CybosOrderResult::MergeFrom(const CybosOrderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosOrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.order_number().size() > 0) {

    order_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_number_);
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from.total_quantity() != 0) {
    _internal_set_total_quantity(from._internal_total_quantity());
  }
}

void CybosOrderResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosOrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosOrderResult::CopyFrom(const CybosOrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosOrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosOrderResult::IsInitialized() const {
  return true;
}

void CybosOrderResult::InternalSwap(CybosOrderResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_number_.Swap(&other->order_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
  swap(quantity_, other->quantity_);
  swap(price_, other->price_);
  swap(is_buy_, other->is_buy_);
  swap(total_quantity_, other->total_quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosOrderResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListType::InitAsDefaultInstance() {
}
class ListType::_Internal {
 public:
};

ListType::ListType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.ListType)
}
ListType::ListType(const ListType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_name().empty()) {
    type_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.ListType)
}

void ListType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListType_stock_5fprovider_2eproto.base);
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListType::~ListType() {
  // @@protoc_insertion_point(destructor:stock_api.ListType)
  SharedDtor();
}

void ListType::SharedDtor() {
  type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListType& ListType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListType_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void ListType::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.ListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.ListType.type_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.ListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_name = 1;
  if (this->type_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.ListType.type_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.ListType)
  return target;
}

size_t ListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.ListType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_name = 1;
  if (this->type_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  const ListType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.ListType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.ListType)
    MergeFrom(*source);
  }
}

void ListType::MergeFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_name().size() > 0) {

    type_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
}

void ListType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListType::CopyFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListType::IsInitialized() const {
  return true;
}

void ListType::InternalSwap(ListType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_name_.Swap(&other->type_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompanyName::InitAsDefaultInstance() {
}
class CompanyName::_Internal {
 public:
};

CompanyName::CompanyName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CompanyName)
}
CompanyName::CompanyName(const CompanyName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.CompanyName)
}

void CompanyName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompanyName_stock_5fprovider_2eproto.base);
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompanyName::~CompanyName() {
  // @@protoc_insertion_point(destructor:stock_api.CompanyName)
  SharedDtor();
}

void CompanyName::SharedDtor() {
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompanyName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompanyName& CompanyName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompanyName_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CompanyName::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CompanyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CompanyName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string company_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CompanyName.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompanyName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CompanyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string company_name = 1;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CompanyName.company_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_company_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CompanyName)
  return target;
}

size_t CompanyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CompanyName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string company_name = 1;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompanyName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CompanyName)
  GOOGLE_DCHECK_NE(&from, this);
  const CompanyName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompanyName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CompanyName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CompanyName)
    MergeFrom(*source);
  }
}

void CompanyName::MergeFrom(const CompanyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CompanyName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
}

void CompanyName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CompanyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompanyName::CopyFrom(const CompanyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CompanyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanyName::IsInitialized() const {
  return true;
}

void CompanyName::InternalSwap(CompanyName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompanyName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PastMinuteQuery::InitAsDefaultInstance() {
  ::stock_api::_PastMinuteQuery_default_instance_._instance.get_mutable()->today_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PastMinuteQuery::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& today(const PastMinuteQuery* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PastMinuteQuery::_Internal::today(const PastMinuteQuery* msg) {
  return *msg->today_;
}
void PastMinuteQuery::clear_today() {
  if (GetArenaNoVirtual() == nullptr && today_ != nullptr) {
    delete today_;
  }
  today_ = nullptr;
}
PastMinuteQuery::PastMinuteQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.PastMinuteQuery)
}
PastMinuteQuery::PastMinuteQuery(const PastMinuteQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_today()) {
    today_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.today_);
  } else {
    today_ = nullptr;
  }
  count_of_days_ = from.count_of_days_;
  // @@protoc_insertion_point(copy_constructor:stock_api.PastMinuteQuery)
}

void PastMinuteQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PastMinuteQuery_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&today_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_of_days_) -
      reinterpret_cast<char*>(&today_)) + sizeof(count_of_days_));
}

PastMinuteQuery::~PastMinuteQuery() {
  // @@protoc_insertion_point(destructor:stock_api.PastMinuteQuery)
  SharedDtor();
}

void PastMinuteQuery::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete today_;
}

void PastMinuteQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PastMinuteQuery& PastMinuteQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PastMinuteQuery_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void PastMinuteQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.PastMinuteQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && today_ != nullptr) {
    delete today_;
  }
  today_ = nullptr;
  count_of_days_ = 0u;
  _internal_metadata_.Clear();
}

const char* PastMinuteQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.PastMinuteQuery.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count_of_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_of_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp today = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_today(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PastMinuteQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.PastMinuteQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.PastMinuteQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // uint32 count_of_days = 2;
  if (this->count_of_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_of_days(), target);
  }

  // .google.protobuf.Timestamp today = 3;
  if (this->has_today()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::today(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.PastMinuteQuery)
  return target;
}

size_t PastMinuteQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.PastMinuteQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp today = 3;
  if (this->has_today()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *today_);
  }

  // uint32 count_of_days = 2;
  if (this->count_of_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count_of_days());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PastMinuteQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.PastMinuteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const PastMinuteQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PastMinuteQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.PastMinuteQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.PastMinuteQuery)
    MergeFrom(*source);
  }
}

void PastMinuteQuery::MergeFrom(const PastMinuteQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.PastMinuteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_today()) {
    _internal_mutable_today()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_today());
  }
  if (from.count_of_days() != 0) {
    _internal_set_count_of_days(from._internal_count_of_days());
  }
}

void PastMinuteQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.PastMinuteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastMinuteQuery::CopyFrom(const PastMinuteQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.PastMinuteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastMinuteQuery::IsInitialized() const {
  return true;
}

void PastMinuteQuery::InternalSwap(PastMinuteQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(today_, other->today_);
  swap(count_of_days_, other->count_of_days_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PastMinuteQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosDayData::InitAsDefaultInstance() {
}
class CybosDayData::_Internal {
 public:
};

CybosDayData::CybosDayData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosDayData)
}
CybosDayData::CybosDayData(const CybosDayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&institution_cum_buy_volume_) -
    reinterpret_cast<char*>(&date_)) + sizeof(institution_cum_buy_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosDayData)
}

void CybosDayData::SharedCtor() {
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&institution_cum_buy_volume_) -
      reinterpret_cast<char*>(&date_)) + sizeof(institution_cum_buy_volume_));
}

CybosDayData::~CybosDayData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosDayData)
  SharedDtor();
}

void CybosDayData::SharedDtor() {
}

void CybosDayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosDayData& CybosDayData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosDayData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosDayData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosDayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&institution_cum_buy_volume_) -
      reinterpret_cast<char*>(&date_)) + sizeof(institution_cum_buy_volume_));
  _internal_metadata_.Clear();
}

const char* CybosDayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowest_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_sell_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cum_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_buy_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 foreigner_hold_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          foreigner_hold_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float foreigner_hold_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          foreigner_hold_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 institution_buy_volume = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          institution_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 institution_cum_buy_volume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          institution_cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_synchronized_bidding = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_synchronized_bidding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosDayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosDayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 date = 1;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_date(), target);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // uint32 start_price = 3;
  if (this->start_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_price(), target);
  }

  // uint32 highest_price = 4;
  if (this->highest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_highest_price(), target);
  }

  // uint32 lowest_price = 5;
  if (this->lowest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lowest_price(), target);
  }

  // uint32 close_price = 6;
  if (this->close_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_close_price(), target);
  }

  // int64 volume = 7;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_volume(), target);
  }

  // uint64 amount = 8;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_amount(), target);
  }

  // uint64 cum_sell_volume = 9;
  if (this->cum_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_cum_sell_volume(), target);
  }

  // uint64 cum_buy_volume = 10;
  if (this->cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_cum_buy_volume(), target);
  }

  // int64 foreigner_hold_volume = 11;
  if (this->foreigner_hold_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_foreigner_hold_volume(), target);
  }

  // float foreigner_hold_rate = 12;
  if (!(this->foreigner_hold_rate() <= 0 && this->foreigner_hold_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_foreigner_hold_rate(), target);
  }

  // int64 institution_buy_volume = 13;
  if (this->institution_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_institution_buy_volume(), target);
  }

  // int64 institution_cum_buy_volume = 14;
  if (this->institution_cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_institution_cum_buy_volume(), target);
  }

  // bool is_synchronized_bidding = 15;
  if (this->is_synchronized_bidding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_synchronized_bidding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosDayData)
  return target;
}

size_t CybosDayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosDayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 date = 1;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_date());
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 start_price = 3;
  if (this->start_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_price());
  }

  // uint32 highest_price = 4;
  if (this->highest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highest_price());
  }

  // uint32 lowest_price = 5;
  if (this->lowest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lowest_price());
  }

  // uint32 close_price = 6;
  if (this->close_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_close_price());
  }

  // int64 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // uint64 amount = 8;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 cum_sell_volume = 9;
  if (this->cum_sell_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume());
  }

  // uint64 cum_buy_volume = 10;
  if (this->cum_buy_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume());
  }

  // int64 foreigner_hold_volume = 11;
  if (this->foreigner_hold_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_foreigner_hold_volume());
  }

  // int64 institution_buy_volume = 13;
  if (this->institution_buy_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_institution_buy_volume());
  }

  // float foreigner_hold_rate = 12;
  if (!(this->foreigner_hold_rate() <= 0 && this->foreigner_hold_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_synchronized_bidding = 15;
  if (this->is_synchronized_bidding() != 0) {
    total_size += 1 + 1;
  }

  // int64 institution_cum_buy_volume = 14;
  if (this->institution_cum_buy_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_institution_cum_buy_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosDayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosDayData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosDayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosDayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosDayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosDayData)
    MergeFrom(*source);
  }
}

void CybosDayData::MergeFrom(const CybosDayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosDayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.start_price() != 0) {
    _internal_set_start_price(from._internal_start_price());
  }
  if (from.highest_price() != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from.lowest_price() != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (from.close_price() != 0) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.cum_sell_volume() != 0) {
    _internal_set_cum_sell_volume(from._internal_cum_sell_volume());
  }
  if (from.cum_buy_volume() != 0) {
    _internal_set_cum_buy_volume(from._internal_cum_buy_volume());
  }
  if (from.foreigner_hold_volume() != 0) {
    _internal_set_foreigner_hold_volume(from._internal_foreigner_hold_volume());
  }
  if (from.institution_buy_volume() != 0) {
    _internal_set_institution_buy_volume(from._internal_institution_buy_volume());
  }
  if (!(from.foreigner_hold_rate() <= 0 && from.foreigner_hold_rate() >= 0)) {
    _internal_set_foreigner_hold_rate(from._internal_foreigner_hold_rate());
  }
  if (from.is_synchronized_bidding() != 0) {
    _internal_set_is_synchronized_bidding(from._internal_is_synchronized_bidding());
  }
  if (from.institution_cum_buy_volume() != 0) {
    _internal_set_institution_cum_buy_volume(from._internal_institution_cum_buy_volume());
  }
}

void CybosDayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosDayData::CopyFrom(const CybosDayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosDayData::IsInitialized() const {
  return true;
}

void CybosDayData::InternalSwap(CybosDayData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(date_, other->date_);
  swap(time_, other->time_);
  swap(start_price_, other->start_price_);
  swap(highest_price_, other->highest_price_);
  swap(lowest_price_, other->lowest_price_);
  swap(close_price_, other->close_price_);
  swap(volume_, other->volume_);
  swap(amount_, other->amount_);
  swap(cum_sell_volume_, other->cum_sell_volume_);
  swap(cum_buy_volume_, other->cum_buy_volume_);
  swap(foreigner_hold_volume_, other->foreigner_hold_volume_);
  swap(institution_buy_volume_, other->institution_buy_volume_);
  swap(foreigner_hold_rate_, other->foreigner_hold_rate_);
  swap(is_synchronized_bidding_, other->is_synchronized_bidding_);
  swap(institution_cum_buy_volume_, other->institution_cum_buy_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosDayData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosDayDatas::InitAsDefaultInstance() {
}
class CybosDayDatas::_Internal {
 public:
};

CybosDayDatas::CybosDayDatas()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosDayDatas)
}
CybosDayDatas::CybosDayDatas(const CybosDayDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      day_data_(from.day_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosDayDatas)
}

void CybosDayDatas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosDayDatas_stock_5fprovider_2eproto.base);
}

CybosDayDatas::~CybosDayDatas() {
  // @@protoc_insertion_point(destructor:stock_api.CybosDayDatas)
  SharedDtor();
}

void CybosDayDatas::SharedDtor() {
}

void CybosDayDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosDayDatas& CybosDayDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosDayDatas_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosDayDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosDayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_data_.Clear();
  _internal_metadata_.Clear();
}

const char* CybosDayDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .stock_api.CybosDayData day_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosDayDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosDayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .stock_api.CybosDayData day_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_day_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_day_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosDayDatas)
  return target;
}

size_t CybosDayDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosDayDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.CybosDayData day_data = 1;
  total_size += 1UL * this->_internal_day_data_size();
  for (const auto& msg : this->day_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosDayDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosDayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosDayDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosDayDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosDayDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosDayDatas)
    MergeFrom(*source);
  }
}

void CybosDayDatas::MergeFrom(const CybosDayDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosDayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  day_data_.MergeFrom(from.day_data_);
}

void CybosDayDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosDayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosDayDatas::CopyFrom(const CybosDayDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosDayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosDayDatas::IsInitialized() const {
  return true;
}

void CybosDayDatas::InternalSwap(CybosDayDatas* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  day_data_.InternalSwap(&other->day_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosDayDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosSubjectTickData::InitAsDefaultInstance() {
  ::stock_api::_CybosSubjectTickData_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosSubjectTickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosSubjectTickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosSubjectTickData::_Internal::tick_date(const CybosSubjectTickData* msg) {
  return *msg->tick_date_;
}
void CybosSubjectTickData::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosSubjectTickData::CybosSubjectTickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosSubjectTickData)
}
CybosSubjectTickData::CybosSubjectTickData(const CybosSubjectTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreigner_total_volume_) -
    reinterpret_cast<char*>(&time_)) + sizeof(foreigner_total_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosSubjectTickData)
}

void CybosSubjectTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosSubjectTickData_stock_5fprovider_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_total_volume_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(foreigner_total_volume_));
}

CybosSubjectTickData::~CybosSubjectTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosSubjectTickData)
  SharedDtor();
}

void CybosSubjectTickData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosSubjectTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosSubjectTickData& CybosSubjectTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosSubjectTickData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosSubjectTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosSubjectTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_total_volume_) -
      reinterpret_cast<char*>(&time_)) + sizeof(foreigner_total_volume_));
  _internal_metadata_.Clear();
}

const char* CybosSubjectTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool buy_or_sell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 foreigner_total_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          foreigner_total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosSubjectTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosSubjectTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string code = 4;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // bool buy_or_sell = 6;
  if (this->buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_buy_or_sell(), target);
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume(), target);
  }

  // int64 total_volume = 8;
  if (this->total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_volume(), target);
  }

  // int64 foreigner_total_volume = 9;
  if (this->foreigner_total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_foreigner_total_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosSubjectTickData)
  return target;
}

size_t CybosSubjectTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosSubjectTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 4;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // bool buy_or_sell = 6;
  if (this->buy_or_sell() != 0) {
    total_size += 1 + 1;
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // int64 total_volume = 8;
  if (this->total_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_volume());
  }

  // int64 foreigner_total_volume = 9;
  if (this->foreigner_total_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_foreigner_total_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosSubjectTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosSubjectTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosSubjectTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosSubjectTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosSubjectTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosSubjectTickData)
    MergeFrom(*source);
  }
}

void CybosSubjectTickData::MergeFrom(const CybosSubjectTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosSubjectTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.buy_or_sell() != 0) {
    _internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.total_volume() != 0) {
    _internal_set_total_volume(from._internal_total_volume());
  }
  if (from.foreigner_total_volume() != 0) {
    _internal_set_foreigner_total_volume(from._internal_foreigner_total_volume());
  }
}

void CybosSubjectTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosSubjectTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosSubjectTickData::CopyFrom(const CybosSubjectTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosSubjectTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosSubjectTickData::IsInitialized() const {
  return true;
}

void CybosSubjectTickData::InternalSwap(CybosSubjectTickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(time_, other->time_);
  swap(buy_or_sell_, other->buy_or_sell_);
  swap(volume_, other->volume_);
  swap(total_volume_, other->total_volume_);
  swap(foreigner_total_volume_, other->foreigner_total_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosSubjectTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosTickData::InitAsDefaultInstance() {
  ::stock_api::_CybosTickData_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosTickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosTickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosTickData::_Internal::tick_date(const CybosTickData* msg) {
  return *msg->tick_date_;
}
void CybosTickData::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosTickData::CybosTickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosTickData)
}
CybosTickData::CybosTickData(const CybosTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&yesterday_diff_, &from.yesterday_diff_,
    static_cast<size_t>(reinterpret_cast<char*>(&cum_buy_volume_) -
    reinterpret_cast<char*>(&yesterday_diff_)) + sizeof(cum_buy_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosTickData)
}

void CybosTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosTickData_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cum_buy_volume_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(cum_buy_volume_));
}

CybosTickData::~CybosTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosTickData)
  SharedDtor();
}

void CybosTickData::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosTickData& CybosTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosTickData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&yesterday_diff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cum_buy_volume_) -
      reinterpret_cast<char*>(&yesterday_diff_)) + sizeof(cum_buy_volume_));
  _internal_metadata_.Clear();
}

const char* CybosTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosTickData.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosTickData.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yesterday_diff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          yesterday_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowest_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ask_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bid_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cum_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_amount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cum_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          current_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool buy_or_sell = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_sell_volume_by_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          cum_sell_volume_by_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_buy_volume_by_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          cum_buy_volume_by_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_with_sec = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          time_with_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 market_type_exp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          market_type_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 market_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          market_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 out_time_volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          out_time_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_sell_volume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          cum_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cum_buy_volume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_kospi = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_kospi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosTickData.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string company_name = 3;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosTickData.company_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_company_name(), target);
  }

  // int32 yesterday_diff = 4;
  if (this->yesterday_diff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_yesterday_diff(), target);
  }

  // uint32 time = 5;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  // uint32 start_price = 6;
  if (this->start_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_price(), target);
  }

  // uint32 highest_price = 7;
  if (this->highest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_highest_price(), target);
  }

  // uint32 lowest_price = 8;
  if (this->lowest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lowest_price(), target);
  }

  // uint32 ask_price = 9;
  if (this->ask_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ask_price(), target);
  }

  // uint32 bid_price = 10;
  if (this->bid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bid_price(), target);
  }

  // uint64 cum_volume = 11;
  if (this->cum_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_cum_volume(), target);
  }

  // uint64 cum_amount = 12;
  if (this->cum_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_cum_amount(), target);
  }

  // uint32 current_price = 13;
  if (this->current_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_current_price(), target);
  }

  // bool buy_or_sell = 14;
  if (this->buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_buy_or_sell(), target);
  }

  // uint64 cum_sell_volume_by_price = 15;
  if (this->cum_sell_volume_by_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_cum_sell_volume_by_price(), target);
  }

  // uint64 cum_buy_volume_by_price = 16;
  if (this->cum_buy_volume_by_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_cum_buy_volume_by_price(), target);
  }

  // int64 volume = 17;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_volume(), target);
  }

  // uint32 time_with_sec = 18;
  if (this->time_with_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_time_with_sec(), target);
  }

  // uint32 market_type_exp = 19;
  if (this->market_type_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_market_type_exp(), target);
  }

  // uint32 market_type = 20;
  if (this->market_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_market_type(), target);
  }

  // uint64 out_time_volume = 21;
  if (this->out_time_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_out_time_volume(), target);
  }

  // uint64 cum_sell_volume = 22;
  if (this->cum_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_cum_sell_volume(), target);
  }

  // uint64 cum_buy_volume = 23;
  if (this->cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_cum_buy_volume(), target);
  }

  // bool is_kospi = 24;
  if (this->is_kospi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_kospi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosTickData)
  return target;
}

size_t CybosTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 3;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // int32 yesterday_diff = 4;
  if (this->yesterday_diff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yesterday_diff());
  }

  // uint32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 start_price = 6;
  if (this->start_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_price());
  }

  // uint32 highest_price = 7;
  if (this->highest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highest_price());
  }

  // uint32 lowest_price = 8;
  if (this->lowest_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lowest_price());
  }

  // uint32 ask_price = 9;
  if (this->ask_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ask_price());
  }

  // uint64 cum_volume = 11;
  if (this->cum_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_volume());
  }

  // uint32 bid_price = 10;
  if (this->bid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bid_price());
  }

  // uint32 current_price = 13;
  if (this->current_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_price());
  }

  // uint64 cum_amount = 12;
  if (this->cum_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_amount());
  }

  // uint64 cum_sell_volume_by_price = 15;
  if (this->cum_sell_volume_by_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume_by_price());
  }

  // uint64 cum_buy_volume_by_price = 16;
  if (this->cum_buy_volume_by_price() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume_by_price());
  }

  // int64 volume = 17;
  if (this->volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // uint32 time_with_sec = 18;
  if (this->time_with_sec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_with_sec());
  }

  // uint32 market_type_exp = 19;
  if (this->market_type_exp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_market_type_exp());
  }

  // bool buy_or_sell = 14;
  if (this->buy_or_sell() != 0) {
    total_size += 1 + 1;
  }

  // bool is_kospi = 24;
  if (this->is_kospi() != 0) {
    total_size += 2 + 1;
  }

  // uint32 market_type = 20;
  if (this->market_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_market_type());
  }

  // uint64 out_time_volume = 21;
  if (this->out_time_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_time_volume());
  }

  // uint64 cum_sell_volume = 22;
  if (this->cum_sell_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume());
  }

  // uint64 cum_buy_volume = 23;
  if (this->cum_buy_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosTickData)
    MergeFrom(*source);
  }
}

void CybosTickData::MergeFrom(const CybosTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.yesterday_diff() != 0) {
    _internal_set_yesterday_diff(from._internal_yesterday_diff());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.start_price() != 0) {
    _internal_set_start_price(from._internal_start_price());
  }
  if (from.highest_price() != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from.lowest_price() != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (from.ask_price() != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from.cum_volume() != 0) {
    _internal_set_cum_volume(from._internal_cum_volume());
  }
  if (from.bid_price() != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from.current_price() != 0) {
    _internal_set_current_price(from._internal_current_price());
  }
  if (from.cum_amount() != 0) {
    _internal_set_cum_amount(from._internal_cum_amount());
  }
  if (from.cum_sell_volume_by_price() != 0) {
    _internal_set_cum_sell_volume_by_price(from._internal_cum_sell_volume_by_price());
  }
  if (from.cum_buy_volume_by_price() != 0) {
    _internal_set_cum_buy_volume_by_price(from._internal_cum_buy_volume_by_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.time_with_sec() != 0) {
    _internal_set_time_with_sec(from._internal_time_with_sec());
  }
  if (from.market_type_exp() != 0) {
    _internal_set_market_type_exp(from._internal_market_type_exp());
  }
  if (from.buy_or_sell() != 0) {
    _internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from.is_kospi() != 0) {
    _internal_set_is_kospi(from._internal_is_kospi());
  }
  if (from.market_type() != 0) {
    _internal_set_market_type(from._internal_market_type());
  }
  if (from.out_time_volume() != 0) {
    _internal_set_out_time_volume(from._internal_out_time_volume());
  }
  if (from.cum_sell_volume() != 0) {
    _internal_set_cum_sell_volume(from._internal_cum_sell_volume());
  }
  if (from.cum_buy_volume() != 0) {
    _internal_set_cum_buy_volume(from._internal_cum_buy_volume());
  }
}

void CybosTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosTickData::CopyFrom(const CybosTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosTickData::IsInitialized() const {
  return true;
}

void CybosTickData::InternalSwap(CybosTickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(yesterday_diff_, other->yesterday_diff_);
  swap(time_, other->time_);
  swap(start_price_, other->start_price_);
  swap(highest_price_, other->highest_price_);
  swap(lowest_price_, other->lowest_price_);
  swap(ask_price_, other->ask_price_);
  swap(cum_volume_, other->cum_volume_);
  swap(bid_price_, other->bid_price_);
  swap(current_price_, other->current_price_);
  swap(cum_amount_, other->cum_amount_);
  swap(cum_sell_volume_by_price_, other->cum_sell_volume_by_price_);
  swap(cum_buy_volume_by_price_, other->cum_buy_volume_by_price_);
  swap(volume_, other->volume_);
  swap(time_with_sec_, other->time_with_sec_);
  swap(market_type_exp_, other->market_type_exp_);
  swap(buy_or_sell_, other->buy_or_sell_);
  swap(is_kospi_, other->is_kospi_);
  swap(market_type_, other->market_type_);
  swap(out_time_volume_, other->out_time_volume_);
  swap(cum_sell_volume_, other->cum_sell_volume_);
  swap(cum_buy_volume_, other->cum_buy_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosBidAskTickData::InitAsDefaultInstance() {
  ::stock_api::_CybosBidAskTickData_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosBidAskTickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosBidAskTickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosBidAskTickData::_Internal::tick_date(const CybosBidAskTickData* msg) {
  return *msg->tick_date_;
}
void CybosBidAskTickData::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosBidAskTickData::CybosBidAskTickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosBidAskTickData)
}
CybosBidAskTickData::CybosBidAskTickData(const CybosBidAskTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ask_prices_(from.ask_prices_),
      bid_prices_(from.bid_prices_),
      ask_remains_(from.ask_remains_),
      bid_remains_(from.bid_remains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosBidAskTickData)
}

void CybosBidAskTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosBidAskTickData_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(time_));
}

CybosBidAskTickData::~CybosBidAskTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosBidAskTickData)
  SharedDtor();
}

void CybosBidAskTickData::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosBidAskTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosBidAskTickData& CybosBidAskTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosBidAskTickData_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosBidAskTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosBidAskTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_prices_.Clear();
  bid_prices_.Clear();
  ask_remains_.Clear();
  bid_remains_.Clear();
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

const char* CybosBidAskTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosBidAskTickData.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ask_prices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ask_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_ask_prices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bid_prices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bid_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_bid_prices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ask_remains = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ask_remains(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_ask_remains(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bid_remains = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bid_remains(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_bid_remains(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_ask_remain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          total_ask_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_bid_remain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          total_bid_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 out_time_total_ask_remain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          out_time_total_ask_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 out_time_total_bid_remain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          out_time_total_bid_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosBidAskTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosBidAskTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosBidAskTickData.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // uint64 volume = 4;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_volume(), target);
  }

  // repeated int32 ask_prices = 5;
  {
    int byte_size = _ask_prices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_ask_prices(), byte_size, target);
    }
  }

  // repeated int32 bid_prices = 6;
  {
    int byte_size = _bid_prices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_bid_prices(), byte_size, target);
    }
  }

  // repeated uint32 ask_remains = 7;
  {
    int byte_size = _ask_remains_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_ask_remains(), byte_size, target);
    }
  }

  // repeated uint32 bid_remains = 8;
  {
    int byte_size = _bid_remains_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_bid_remains(), byte_size, target);
    }
  }

  // uint64 total_ask_remain = 9;
  if (this->total_ask_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total_ask_remain(), target);
  }

  // uint64 total_bid_remain = 10;
  if (this->total_bid_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_bid_remain(), target);
  }

  // int64 out_time_total_ask_remain = 11;
  if (this->out_time_total_ask_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_out_time_total_ask_remain(), target);
  }

  // int64 out_time_total_bid_remain = 12;
  if (this->out_time_total_bid_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_out_time_total_bid_remain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosBidAskTickData)
  return target;
}

size_t CybosBidAskTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosBidAskTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ask_prices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ask_prices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ask_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bid_prices = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bid_prices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bid_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ask_remains = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ask_remains_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ask_remains_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bid_remains = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bid_remains_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bid_remains_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint64 volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // uint64 total_ask_remain = 9;
  if (this->total_ask_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_ask_remain());
  }

  // uint64 total_bid_remain = 10;
  if (this->total_bid_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_bid_remain());
  }

  // int64 out_time_total_ask_remain = 11;
  if (this->out_time_total_ask_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_out_time_total_ask_remain());
  }

  // int64 out_time_total_bid_remain = 12;
  if (this->out_time_total_bid_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_out_time_total_bid_remain());
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosBidAskTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosBidAskTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosBidAskTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosBidAskTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosBidAskTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosBidAskTickData)
    MergeFrom(*source);
  }
}

void CybosBidAskTickData::MergeFrom(const CybosBidAskTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosBidAskTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ask_prices_.MergeFrom(from.ask_prices_);
  bid_prices_.MergeFrom(from.bid_prices_);
  ask_remains_.MergeFrom(from.ask_remains_);
  bid_remains_.MergeFrom(from.bid_remains_);
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.total_ask_remain() != 0) {
    _internal_set_total_ask_remain(from._internal_total_ask_remain());
  }
  if (from.total_bid_remain() != 0) {
    _internal_set_total_bid_remain(from._internal_total_bid_remain());
  }
  if (from.out_time_total_ask_remain() != 0) {
    _internal_set_out_time_total_ask_remain(from._internal_out_time_total_ask_remain());
  }
  if (from.out_time_total_bid_remain() != 0) {
    _internal_set_out_time_total_bid_remain(from._internal_out_time_total_bid_remain());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void CybosBidAskTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosBidAskTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosBidAskTickData::CopyFrom(const CybosBidAskTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosBidAskTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosBidAskTickData::IsInitialized() const {
  return true;
}

void CybosBidAskTickData::InternalSwap(CybosBidAskTickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ask_prices_.InternalSwap(&other->ask_prices_);
  bid_prices_.InternalSwap(&other->bid_prices_);
  ask_remains_.InternalSwap(&other->ask_remains_);
  bid_remains_.InternalSwap(&other->bid_remains_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(volume_, other->volume_);
  swap(total_ask_remain_, other->total_ask_remain_);
  swap(total_bid_remain_, other->total_bid_remain_);
  swap(out_time_total_ask_remain_, other->out_time_total_ask_remain_);
  swap(out_time_total_bid_remain_, other->out_time_total_bid_remain_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosBidAskTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CybosStockAlarm::InitAsDefaultInstance() {
  ::stock_api::_CybosStockAlarm_default_instance_._instance.get_mutable()->tick_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CybosStockAlarm::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosStockAlarm* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CybosStockAlarm::_Internal::tick_date(const CybosStockAlarm* msg) {
  return *msg->tick_date_;
}
void CybosStockAlarm::clear_tick_date() {
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosStockAlarm::CybosStockAlarm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_api.CybosStockAlarm)
}
CybosStockAlarm::CybosStockAlarm(const CybosStockAlarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarm_category_) -
    reinterpret_cast<char*>(&time_)) + sizeof(alarm_category_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosStockAlarm)
}

void CybosStockAlarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CybosStockAlarm_stock_5fprovider_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_category_) -
      reinterpret_cast<char*>(&tick_date_)) + sizeof(alarm_category_));
}

CybosStockAlarm::~CybosStockAlarm() {
  // @@protoc_insertion_point(destructor:stock_api.CybosStockAlarm)
  SharedDtor();
}

void CybosStockAlarm::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosStockAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CybosStockAlarm& CybosStockAlarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CybosStockAlarm_stock_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void CybosStockAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosStockAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_category_) -
      reinterpret_cast<char*>(&time_)) + sizeof(alarm_category_));
  _internal_metadata_.Clear();
}

const char* CybosStockAlarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 market_category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          market_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosStockAlarm.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alarm_category = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          alarm_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosStockAlarm.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosStockAlarm.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CybosStockAlarm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosStockAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // int32 type_category = 3;
  if (this->type_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type_category(), target);
  }

  // int32 market_category = 4;
  if (this->market_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_market_category(), target);
  }

  // string code = 5;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosStockAlarm.code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_code(), target);
  }

  // int32 alarm_category = 6;
  if (this->alarm_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_alarm_category(), target);
  }

  // string title = 7;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosStockAlarm.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string content = 8;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosStockAlarm.content");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosStockAlarm)
  return target;
}

size_t CybosStockAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosStockAlarm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string title = 7;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 8;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // int32 type_category = 3;
  if (this->type_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_category());
  }

  // int32 market_category = 4;
  if (this->market_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_market_category());
  }

  // int32 alarm_category = 6;
  if (this->alarm_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_alarm_category());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CybosStockAlarm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_api.CybosStockAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const CybosStockAlarm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CybosStockAlarm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_api.CybosStockAlarm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_api.CybosStockAlarm)
    MergeFrom(*source);
  }
}

void CybosStockAlarm::MergeFrom(const CybosStockAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosStockAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_tick_date()) {
    _internal_mutable_tick_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.type_category() != 0) {
    _internal_set_type_category(from._internal_type_category());
  }
  if (from.market_category() != 0) {
    _internal_set_market_category(from._internal_market_category());
  }
  if (from.alarm_category() != 0) {
    _internal_set_alarm_category(from._internal_alarm_category());
  }
}

void CybosStockAlarm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_api.CybosStockAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CybosStockAlarm::CopyFrom(const CybosStockAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosStockAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosStockAlarm::IsInitialized() const {
  return true;
}

void CybosStockAlarm::InternalSwap(CybosStockAlarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tick_date_, other->tick_date_);
  swap(time_, other->time_);
  swap(type_category_, other->type_category_);
  swap(market_category_, other->market_category_);
  swap(alarm_category_, other->alarm_category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosStockAlarm::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stock_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stock_api::StockCodeQuery* Arena::CreateMaybeMessage< ::stock_api::StockCodeQuery >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::StockCodeQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CodeList* Arena::CreateMaybeMessage< ::stock_api::CodeList >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CodeList >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Prices* Arena::CreateMaybeMessage< ::stock_api::Prices >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::Prices >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Bool* Arena::CreateMaybeMessage< ::stock_api::Bool >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::Bool >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::TodayTopOption* Arena::CreateMaybeMessage< ::stock_api::TodayTopOption >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::TodayTopOption >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Balance* Arena::CreateMaybeMessage< ::stock_api::Balance >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::Balance >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::StockQuery* Arena::CreateMaybeMessage< ::stock_api::StockQuery >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::StockQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::TopList* Arena::CreateMaybeMessage< ::stock_api::TopList >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::TopList >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::SimulationOperation* Arena::CreateMaybeMessage< ::stock_api::SimulationOperation >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::SimulationOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::SimulationStatus* Arena::CreateMaybeMessage< ::stock_api::SimulationStatus >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::SimulationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::OrderMsg* Arena::CreateMaybeMessage< ::stock_api::OrderMsg >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::OrderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::TradeMsg* Arena::CreateMaybeMessage< ::stock_api::TradeMsg >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::TradeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosOrderReturn* Arena::CreateMaybeMessage< ::stock_api::CybosOrderReturn >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosOrderReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Report* Arena::CreateMaybeMessage< ::stock_api::Report >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::Report >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::OrderResult* Arena::CreateMaybeMessage< ::stock_api::OrderResult >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::OrderResult >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosOrderResult* Arena::CreateMaybeMessage< ::stock_api::CybosOrderResult >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosOrderResult >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::ListType* Arena::CreateMaybeMessage< ::stock_api::ListType >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::ListType >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CompanyName* Arena::CreateMaybeMessage< ::stock_api::CompanyName >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CompanyName >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::PastMinuteQuery* Arena::CreateMaybeMessage< ::stock_api::PastMinuteQuery >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::PastMinuteQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosDayData* Arena::CreateMaybeMessage< ::stock_api::CybosDayData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosDayData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosDayDatas* Arena::CreateMaybeMessage< ::stock_api::CybosDayDatas >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosDayDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosSubjectTickData* Arena::CreateMaybeMessage< ::stock_api::CybosSubjectTickData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosSubjectTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosTickData* Arena::CreateMaybeMessage< ::stock_api::CybosTickData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosBidAskTickData* Arena::CreateMaybeMessage< ::stock_api::CybosBidAskTickData >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosBidAskTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosStockAlarm* Arena::CreateMaybeMessage< ::stock_api::CybosStockAlarm >(Arena* arena) {
  return Arena::CreateInternal< ::stock_api::CybosStockAlarm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
